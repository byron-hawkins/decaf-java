/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.16u-20021014-2200
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */


#ifdef __cplusplus
template<class T> class SwigValueWrapper {
    T *tt;
public:
    inline SwigValueWrapper() : tt(0) { }
    inline ~SwigValueWrapper() { if (tt) delete tt; } 
    inline SwigValueWrapper& operator=(const T& t) { tt = new T(t); return *this; }
    inline operator T&() const { return *tt; }
    inline T *operator&() { return tt; }
};                                                    
#endif


#if defined(__GNUC__)
    typedef long long __int64; /*For gcc on Windows */
#endif
#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;

#if defined(SWIG_NOINCLUDE)
void SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg);
#else


void SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" } };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


#endif


#if defined(SWIG_NOINCLUDE) || defined(SWIG_NOARRAYS)


int SWIG_JavaArrayInBool (JNIEnv *jenv, jboolean **jarr, bool **carr, jbooleanArray input);
void SWIG_JavaArrayArgoutBool (JNIEnv *jenv, jboolean *jarr, bool *carr, jbooleanArray input);
jbooleanArray SWIG_JavaArrayOutBool (JNIEnv *jenv, bool *result, jsize sz);


int SWIG_JavaArrayInSchar (JNIEnv *jenv, jbyte **jarr, signed char **carr, jbyteArray input);
void SWIG_JavaArrayArgoutSchar (JNIEnv *jenv, jbyte *jarr, signed char *carr, jbyteArray input);
jbyteArray SWIG_JavaArrayOutSchar (JNIEnv *jenv, signed char *result, jsize sz);


int SWIG_JavaArrayInUchar (JNIEnv *jenv, jshort **jarr, unsigned char **carr, jshortArray input);
void SWIG_JavaArrayArgoutUchar (JNIEnv *jenv, jshort *jarr, unsigned char *carr, jshortArray input);
jshortArray SWIG_JavaArrayOutUchar (JNIEnv *jenv, unsigned char *result, jsize sz);


int SWIG_JavaArrayInShort (JNIEnv *jenv, jshort **jarr, short **carr, jshortArray input);
void SWIG_JavaArrayArgoutShort (JNIEnv *jenv, jshort *jarr, short *carr, jshortArray input);
jshortArray SWIG_JavaArrayOutShort (JNIEnv *jenv, short *result, jsize sz);


int SWIG_JavaArrayInUshort (JNIEnv *jenv, jint **jarr, unsigned short **carr, jintArray input);
void SWIG_JavaArrayArgoutUshort (JNIEnv *jenv, jint *jarr, unsigned short *carr, jintArray input);
jintArray SWIG_JavaArrayOutUshort (JNIEnv *jenv, unsigned short *result, jsize sz);


int SWIG_JavaArrayInInt (JNIEnv *jenv, jint **jarr, int **carr, jintArray input);
void SWIG_JavaArrayArgoutInt (JNIEnv *jenv, jint *jarr, int *carr, jintArray input);
jintArray SWIG_JavaArrayOutInt (JNIEnv *jenv, int *result, jsize sz);


int SWIG_JavaArrayInUint (JNIEnv *jenv, jlong **jarr, unsigned int **carr, jlongArray input);
void SWIG_JavaArrayArgoutUint (JNIEnv *jenv, jlong *jarr, unsigned int *carr, jlongArray input);
jlongArray SWIG_JavaArrayOutUint (JNIEnv *jenv, unsigned int *result, jsize sz);


int SWIG_JavaArrayInLong (JNIEnv *jenv, jint **jarr, long **carr, jintArray input);
void SWIG_JavaArrayArgoutLong (JNIEnv *jenv, jint *jarr, long *carr, jintArray input);
jintArray SWIG_JavaArrayOutLong (JNIEnv *jenv, long *result, jsize sz);


int SWIG_JavaArrayInUlong (JNIEnv *jenv, jlong **jarr, unsigned long **carr, jlongArray input);
void SWIG_JavaArrayArgoutUlong (JNIEnv *jenv, jlong *jarr, unsigned long *carr, jlongArray input);
jlongArray SWIG_JavaArrayOutUlong (JNIEnv *jenv, unsigned long *result, jsize sz);


int SWIG_JavaArrayInLonglong (JNIEnv *jenv, jlong **jarr, jlong **carr, jlongArray input);
void SWIG_JavaArrayArgoutLonglong (JNIEnv *jenv, jlong *jarr, jlong *carr, jlongArray input);
jlongArray SWIG_JavaArrayOutLonglong (JNIEnv *jenv, jlong *result, jsize sz);


int SWIG_JavaArrayInFloat (JNIEnv *jenv, jfloat **jarr, float **carr, jfloatArray input);
void SWIG_JavaArrayArgoutFloat (JNIEnv *jenv, jfloat *jarr, float *carr, jfloatArray input);
jfloatArray SWIG_JavaArrayOutFloat (JNIEnv *jenv, float *result, jsize sz);


int SWIG_JavaArrayInDouble (JNIEnv *jenv, jdouble **jarr, double **carr, jdoubleArray input);
void SWIG_JavaArrayArgoutDouble (JNIEnv *jenv, jdouble *jarr, double *carr, jdoubleArray input);
jdoubleArray SWIG_JavaArrayOutDouble (JNIEnv *jenv, double *result, jsize sz);


#else


/* bool[] support */
int SWIG_JavaArrayInBool (JNIEnv *jenv, jboolean **jarr, bool **carr, jbooleanArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetBooleanArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new bool[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = ((*jarr)[i] != 0);
  return 1;
}

void SWIG_JavaArrayArgoutBool (JNIEnv *jenv, jboolean *jarr, bool *carr, jbooleanArray input) {
  int i;
  jsize sz;
  sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jboolean)carr[i];
  jenv->ReleaseBooleanArrayElements(input, jarr, 0);
}

jbooleanArray SWIG_JavaArrayOutBool (JNIEnv *jenv, bool *result, jsize sz) {
  jboolean *arr;
  int i;
  jbooleanArray jresult = jenv->NewBooleanArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetBooleanArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jboolean)result[i];
  jenv->ReleaseBooleanArrayElements(jresult, arr, 0);
  return jresult;
}


/* signed char[] support */
int SWIG_JavaArrayInSchar (JNIEnv *jenv, jbyte **jarr, signed char **carr, jbyteArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetByteArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new signed char[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (signed char)(*jarr)[i];
  return 1;
}

void SWIG_JavaArrayArgoutSchar (JNIEnv *jenv, jbyte *jarr, signed char *carr, jbyteArray input) {
  int i;
  jsize sz;
  sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jbyte)carr[i];
  jenv->ReleaseByteArrayElements(input, jarr, 0);
}

jbyteArray SWIG_JavaArrayOutSchar (JNIEnv *jenv, signed char *result, jsize sz) {
  jbyte *arr;
  int i;
  jbyteArray jresult = jenv->NewByteArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetByteArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jbyte)result[i];
  jenv->ReleaseByteArrayElements(jresult, arr, 0);
  return jresult;
}


/* unsigned char[] support */
int SWIG_JavaArrayInUchar (JNIEnv *jenv, jshort **jarr, unsigned char **carr, jshortArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetShortArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new unsigned char[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (unsigned char)(*jarr)[i];
  return 1;
}

void SWIG_JavaArrayArgoutUchar (JNIEnv *jenv, jshort *jarr, unsigned char *carr, jshortArray input) {
  int i;
  jsize sz;
  sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jshort)carr[i];
  jenv->ReleaseShortArrayElements(input, jarr, 0);
}

jshortArray SWIG_JavaArrayOutUchar (JNIEnv *jenv, unsigned char *result, jsize sz) {
  jshort *arr;
  int i;
  jshortArray jresult = jenv->NewShortArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetShortArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jshort)result[i];
  jenv->ReleaseShortArrayElements(jresult, arr, 0);
  return jresult;
}


/* short[] support */
int SWIG_JavaArrayInShort (JNIEnv *jenv, jshort **jarr, short **carr, jshortArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetShortArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new short[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (short)(*jarr)[i];
  return 1;
}

void SWIG_JavaArrayArgoutShort (JNIEnv *jenv, jshort *jarr, short *carr, jshortArray input) {
  int i;
  jsize sz;
  sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jshort)carr[i];
  jenv->ReleaseShortArrayElements(input, jarr, 0);
}

jshortArray SWIG_JavaArrayOutShort (JNIEnv *jenv, short *result, jsize sz) {
  jshort *arr;
  int i;
  jshortArray jresult = jenv->NewShortArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetShortArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jshort)result[i];
  jenv->ReleaseShortArrayElements(jresult, arr, 0);
  return jresult;
}


/* unsigned short[] support */
int SWIG_JavaArrayInUshort (JNIEnv *jenv, jint **jarr, unsigned short **carr, jintArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetIntArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new unsigned short[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (unsigned short)(*jarr)[i];
  return 1;
}

void SWIG_JavaArrayArgoutUshort (JNIEnv *jenv, jint *jarr, unsigned short *carr, jintArray input) {
  int i;
  jsize sz;
  sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jint)carr[i];
  jenv->ReleaseIntArrayElements(input, jarr, 0);
}

jintArray SWIG_JavaArrayOutUshort (JNIEnv *jenv, unsigned short *result, jsize sz) {
  jint *arr;
  int i;
  jintArray jresult = jenv->NewIntArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetIntArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jint)result[i];
  jenv->ReleaseIntArrayElements(jresult, arr, 0);
  return jresult;
}


/* int[] support */
int SWIG_JavaArrayInInt (JNIEnv *jenv, jint **jarr, int **carr, jintArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetIntArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new int[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (int)(*jarr)[i];
  return 1;
}

void SWIG_JavaArrayArgoutInt (JNIEnv *jenv, jint *jarr, int *carr, jintArray input) {
  int i;
  jsize sz;
  sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jint)carr[i];
  jenv->ReleaseIntArrayElements(input, jarr, 0);
}

jintArray SWIG_JavaArrayOutInt (JNIEnv *jenv, int *result, jsize sz) {
  jint *arr;
  int i;
  jintArray jresult = jenv->NewIntArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetIntArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jint)result[i];
  jenv->ReleaseIntArrayElements(jresult, arr, 0);
  return jresult;
}


/* unsigned int[] support */
int SWIG_JavaArrayInUint (JNIEnv *jenv, jlong **jarr, unsigned int **carr, jlongArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetLongArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new unsigned int[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (unsigned int)(*jarr)[i];
  return 1;
}

void SWIG_JavaArrayArgoutUint (JNIEnv *jenv, jlong *jarr, unsigned int *carr, jlongArray input) {
  int i;
  jsize sz;
  sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jlong)carr[i];
  jenv->ReleaseLongArrayElements(input, jarr, 0);
}

jlongArray SWIG_JavaArrayOutUint (JNIEnv *jenv, unsigned int *result, jsize sz) {
  jlong *arr;
  int i;
  jlongArray jresult = jenv->NewLongArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetLongArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jlong)result[i];
  jenv->ReleaseLongArrayElements(jresult, arr, 0);
  return jresult;
}


/* long[] support */
int SWIG_JavaArrayInLong (JNIEnv *jenv, jint **jarr, long **carr, jintArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetIntArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new long[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (long)(*jarr)[i];
  return 1;
}

void SWIG_JavaArrayArgoutLong (JNIEnv *jenv, jint *jarr, long *carr, jintArray input) {
  int i;
  jsize sz;
  sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jint)carr[i];
  jenv->ReleaseIntArrayElements(input, jarr, 0);
}

jintArray SWIG_JavaArrayOutLong (JNIEnv *jenv, long *result, jsize sz) {
  jint *arr;
  int i;
  jintArray jresult = jenv->NewIntArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetIntArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jint)result[i];
  jenv->ReleaseIntArrayElements(jresult, arr, 0);
  return jresult;
}


/* unsigned long[] support */
int SWIG_JavaArrayInUlong (JNIEnv *jenv, jlong **jarr, unsigned long **carr, jlongArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetLongArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new unsigned long[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (unsigned long)(*jarr)[i];
  return 1;
}

void SWIG_JavaArrayArgoutUlong (JNIEnv *jenv, jlong *jarr, unsigned long *carr, jlongArray input) {
  int i;
  jsize sz;
  sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jlong)carr[i];
  jenv->ReleaseLongArrayElements(input, jarr, 0);
}

jlongArray SWIG_JavaArrayOutUlong (JNIEnv *jenv, unsigned long *result, jsize sz) {
  jlong *arr;
  int i;
  jlongArray jresult = jenv->NewLongArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetLongArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jlong)result[i];
  jenv->ReleaseLongArrayElements(jresult, arr, 0);
  return jresult;
}


/* jlong[] support */
int SWIG_JavaArrayInLonglong (JNIEnv *jenv, jlong **jarr, jlong **carr, jlongArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetLongArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new jlong[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (jlong)(*jarr)[i];
  return 1;
}

void SWIG_JavaArrayArgoutLonglong (JNIEnv *jenv, jlong *jarr, jlong *carr, jlongArray input) {
  int i;
  jsize sz;
  sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jlong)carr[i];
  jenv->ReleaseLongArrayElements(input, jarr, 0);
}

jlongArray SWIG_JavaArrayOutLonglong (JNIEnv *jenv, jlong *result, jsize sz) {
  jlong *arr;
  int i;
  jlongArray jresult = jenv->NewLongArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetLongArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jlong)result[i];
  jenv->ReleaseLongArrayElements(jresult, arr, 0);
  return jresult;
}


/* float[] support */
int SWIG_JavaArrayInFloat (JNIEnv *jenv, jfloat **jarr, float **carr, jfloatArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetFloatArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new float[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (float)(*jarr)[i];
  return 1;
}

void SWIG_JavaArrayArgoutFloat (JNIEnv *jenv, jfloat *jarr, float *carr, jfloatArray input) {
  int i;
  jsize sz;
  sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jfloat)carr[i];
  jenv->ReleaseFloatArrayElements(input, jarr, 0);
}

jfloatArray SWIG_JavaArrayOutFloat (JNIEnv *jenv, float *result, jsize sz) {
  jfloat *arr;
  int i;
  jfloatArray jresult = jenv->NewFloatArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetFloatArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jfloat)result[i];
  jenv->ReleaseFloatArrayElements(jresult, arr, 0);
  return jresult;
}


/* double[] support */
int SWIG_JavaArrayInDouble (JNIEnv *jenv, jdouble **jarr, double **carr, jdoubleArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetDoubleArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new double[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (double)(*jarr)[i];
  return 1;
}

void SWIG_JavaArrayArgoutDouble (JNIEnv *jenv, jdouble *jarr, double *carr, jdoubleArray input) {
  int i;
  jsize sz;
  sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jdouble)carr[i];
  jenv->ReleaseDoubleArrayElements(input, jarr, 0);
}

jdoubleArray SWIG_JavaArrayOutDouble (JNIEnv *jenv, double *result, jsize sz) {
  jdouble *arr;
  int i;
  jdoubleArray jresult = jenv->NewDoubleArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetDoubleArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jdouble)result[i];
  jenv->ReleaseDoubleArrayElements(jresult, arr, 0);
  return jresult;
}


#endif


#include "../../../native/template.h"
#include "../../../../umail/jMail.h"
#include "../../../../umail/util.h"
#include "../../../native/plugin.h"
#include "time.h"

#ifdef __cplusplus
extern "C" {
#endif
JNIEXPORT jboolean JNICALL Java_com_bitwise_umail_uMailJNI_uIterator_1hasNext(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jboolean jresult = 0 ;
    uIterator *arg1 = (uIterator *) 0 ;
    bool result;
    
    arg1 = *(uIterator **)&jarg1; 
    result = (bool)(arg1)->hasNext();
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jobject JNICALL Java_com_bitwise_umail_uMailJNI_uIterator_1next(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jobject jresult = 0 ;
    uIterator *arg1 = (uIterator *) 0 ;
    jobject result;
    
    arg1 = *(uIterator **)&jarg1; 
    result = (arg1)->next();
    
    jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_com_bitwise_umail_uMailJNI_uIterator_1getNext(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    uIterator *arg1 = (uIterator *) 0 ;
    void *result;
    
    arg1 = *(uIterator **)&jarg1; 
    result = (void *)(arg1)->getNext();
    
    *(void **)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_com_bitwise_umail_uMailJNI_uIterator_1remove(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    uIterator *arg1 = (uIterator *) 0 ;
    
    arg1 = *(uIterator **)&jarg1; 
    (arg1)->remove();
    
}


JNIEXPORT void JNICALL Java_com_bitwise_umail_uMailJNI_delete_1uIterator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    uIterator *arg1 = (uIterator *) 0 ;
    
    arg1 = *(uIterator **)&jarg1; 
    delete arg1;
    
}


JNIEXPORT jstring JNICALL Java_com_bitwise_umail_uMailJNI_jString_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jstring jresult = 0 ;
    jString *arg1 = (jString *) 0 ;
    char *result;
    
    arg1 = *(jString **)&jarg1; 
    result = (char *)(arg1)->get();
    
    {
        if(result) jresult = jenv->NewStringUTF(result); 
    }
    return jresult;
}


JNIEXPORT jlong JNICALL Java_com_bitwise_umail_uMailJNI_new_1jString(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    jString *result;
    
    result = (jString *)new jString();
    
    *(jString **)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_com_bitwise_umail_uMailJNI_delete_1jString(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jString *arg1 = (jString *) 0 ;
    
    arg1 = *(jString **)&jarg1; 
    delete arg1;
    
}


JNIEXPORT jlong JNICALL Java_com_bitwise_umail_uMailJNI_new_1jHandle(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    jHandle *result;
    
    result = (jHandle *)new jHandle();
    
    *(jHandle **)&jresult = result; 
    return jresult;
}


JNIEXPORT jstring JNICALL Java_com_bitwise_umail_uMailJNI_jHandle_1getMethodName(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jstring jresult = 0 ;
    jHandle *arg1 = (jHandle *) 0 ;
    char *result;
    
    arg1 = *(jHandle **)&jarg1; 
    result = (char *)(arg1)->getMethodName();
    
    {
        if(result) jresult = jenv->NewStringUTF(result); 
    }
    return jresult;
}


JNIEXPORT jstring JNICALL Java_com_bitwise_umail_uMailJNI_jHandle_1getPluginName(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jstring jresult = 0 ;
    jHandle *arg1 = (jHandle *) 0 ;
    char *result;
    
    arg1 = *(jHandle **)&jarg1; 
    result = (char *)(arg1)->getPluginName();
    
    {
        if(result) jresult = jenv->NewStringUTF(result); 
    }
    return jresult;
}


JNIEXPORT jstring JNICALL Java_com_bitwise_umail_uMailJNI_jHandle_1getDescription(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jstring jresult = 0 ;
    jHandle *arg1 = (jHandle *) 0 ;
    char *result;
    
    arg1 = *(jHandle **)&jarg1; 
    result = (char *)(arg1)->getDescription();
    
    {
        if(result) jresult = jenv->NewStringUTF(result); 
    }
    return jresult;
}


JNIEXPORT jlong JNICALL Java_com_bitwise_umail_uMailJNI_jHandle_1getParameterTypes(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    jHandle *arg1 = (jHandle *) 0 ;
    uIterator *result;
    
    arg1 = *(jHandle **)&jarg1; 
    result = (uIterator *)(arg1)->getParameterTypes();
    
    *(uIterator **)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_com_bitwise_umail_uMailJNI_jHandle_1setPluginName(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    jHandle *arg1 = (jHandle *) 0 ;
    char *arg2 ;
    
    arg1 = *(jHandle **)&jarg1; 
    {
        arg2 = 0;
        if (jarg2) {
            arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
            if (!arg2) return ;
        }
    }
    (arg1)->setPluginName(arg2);
    
    {
        if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2); 
    }
}


JNIEXPORT void JNICALL Java_com_bitwise_umail_uMailJNI_delete_1jHandle(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jHandle *arg1 = (jHandle *) 0 ;
    
    arg1 = *(jHandle **)&jarg1; 
    delete arg1;
    
}


JNIEXPORT jstring JNICALL Java_com_bitwise_umail_uMailJNI_jType_1unqualifiedName(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jstring jresult = 0 ;
    jType *arg1 = (jType *) 0 ;
    char *result;
    
    arg1 = *(jType **)&jarg1; 
    result = (char *)(arg1)->unqualifiedName();
    
    {
        if(result) jresult = jenv->NewStringUTF(result); 
    }
    return jresult;
}


JNIEXPORT jlong JNICALL Java_com_bitwise_umail_uMailJNI_jType_1getContent(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    jType *arg1 = (jType *) 0 ;
    void *result;
    
    arg1 = *(jType **)&jarg1; 
    result = (void *)(arg1)->getContent();
    
    *(void **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_com_bitwise_umail_uMailJNI_new_1jType(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    jType *result;
    
    result = (jType *)new jType();
    
    *(jType **)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_com_bitwise_umail_uMailJNI_delete_1jType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jType *arg1 = (jType *) 0 ;
    
    arg1 = *(jType **)&jarg1; 
    delete arg1;
    
}


JNIEXPORT jint JNICALL Java_com_bitwise_umail_uMailJNI_jTime_1getSecond(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    jTime *arg1 = (jTime *) 0 ;
    int result;
    
    arg1 = *(jTime **)&jarg1; 
    result = (int)(arg1)->getSecond();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_com_bitwise_umail_uMailJNI_jTime_1getMinute(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    jTime *arg1 = (jTime *) 0 ;
    int result;
    
    arg1 = *(jTime **)&jarg1; 
    result = (int)(arg1)->getMinute();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_com_bitwise_umail_uMailJNI_jTime_1getHour(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    jTime *arg1 = (jTime *) 0 ;
    int result;
    
    arg1 = *(jTime **)&jarg1; 
    result = (int)(arg1)->getHour();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_com_bitwise_umail_uMailJNI_jTime_1getDay(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    jTime *arg1 = (jTime *) 0 ;
    int result;
    
    arg1 = *(jTime **)&jarg1; 
    result = (int)(arg1)->getDay();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_com_bitwise_umail_uMailJNI_jTime_1getMonth(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    jTime *arg1 = (jTime *) 0 ;
    int result;
    
    arg1 = *(jTime **)&jarg1; 
    result = (int)(arg1)->getMonth();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_com_bitwise_umail_uMailJNI_jTime_1getYear(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    jTime *arg1 = (jTime *) 0 ;
    int result;
    
    arg1 = *(jTime **)&jarg1; 
    result = (int)(arg1)->getYear();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_com_bitwise_umail_uMailJNI_jTime_1isDST(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jboolean jresult = 0 ;
    jTime *arg1 = (jTime *) 0 ;
    bool result;
    
    arg1 = *(jTime **)&jarg1; 
    result = (bool)(arg1)->isDST();
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_com_bitwise_umail_uMailJNI_new_1jTime(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    jTime *result;
    
    result = (jTime *)new jTime();
    
    *(jTime **)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_com_bitwise_umail_uMailJNI_delete_1jTime(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jTime *arg1 = (jTime *) 0 ;
    
    arg1 = *(jTime **)&jarg1; 
    delete arg1;
    
}


JNIEXPORT void JNICALL Java_com_bitwise_umail_uMailJNI_jPluginLib_1init(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    void *arg1 = (void *) 0 ;
    
    arg1 = *(void **)&jarg1; 
    jPluginLib::init(arg1);
    
}


JNIEXPORT void JNICALL Java_com_bitwise_umail_uMailJNI_jPluginLib_1log(JNIEnv *jenv, jclass jcls, jstring jarg1) {
    char *arg1 ;
    
    {
        arg1 = 0;
        if (jarg1) {
            arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
            if (!arg1) return ;
        }
    }
    jPluginLib::log(arg1);
    
    {
        if (arg1) jenv->ReleaseStringUTFChars(jarg1, arg1); 
    }
}


JNIEXPORT jstring JNICALL Java_com_bitwise_umail_uMailJNI_jPluginLib_1getClasspath(JNIEnv *jenv, jclass jcls) {
    jstring jresult = 0 ;
    char *result;
    
    result = (char *)jPluginLib::getClasspath();
    
    {
        if(result) jresult = jenv->NewStringUTF(result); 
    }
    return jresult;
}


JNIEXPORT jlong JNICALL Java_com_bitwise_umail_uMailJNI_new_1jPluginLib(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    jPluginLib *result;
    
    result = (jPluginLib *)new jPluginLib();
    
    *(jPluginLib **)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_com_bitwise_umail_uMailJNI_delete_1jPluginLib(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jPluginLib *arg1 = (jPluginLib *) 0 ;
    
    arg1 = *(jPluginLib **)&jarg1; 
    delete arg1;
    
}


JNIEXPORT jlong JNICALL Java_com_bitwise_umail_uMailJNI_new_1jMessage(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    void *arg1 = (void *) 0 ;
    jMessage *result;
    
    arg1 = *(void **)&jarg1; 
    result = (jMessage *)new jMessage(arg1);
    
    *(jMessage **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_com_bitwise_umail_uMailJNI_jMessage_1getFrom(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    jMessage *arg1 = (jMessage *) 0 ;
    jAddressee *result;
    
    arg1 = *(jMessage **)&jarg1; 
    result = (jAddressee *)(arg1)->getFrom();
    
    *(jAddressee **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_com_bitwise_umail_uMailJNI_jMessage_1getTo(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    jMessage *arg1 = (jMessage *) 0 ;
    jAddressee *result;
    
    arg1 = *(jMessage **)&jarg1; 
    result = (jAddressee *)(arg1)->getTo();
    
    *(jAddressee **)&jresult = result; 
    return jresult;
}


JNIEXPORT jstring JNICALL Java_com_bitwise_umail_uMailJNI_jMessage_1getSubject(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jstring jresult = 0 ;
    jMessage *arg1 = (jMessage *) 0 ;
    char *result;
    
    arg1 = *(jMessage **)&jarg1; 
    result = (char *)(arg1)->getSubject();
    
    {
        if(result) jresult = jenv->NewStringUTF(result); 
    }
    return jresult;
}


JNIEXPORT jstring JNICALL Java_com_bitwise_umail_uMailJNI_jMessage_1getBody(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jstring jresult = 0 ;
    jMessage *arg1 = (jMessage *) 0 ;
    char *result;
    
    arg1 = *(jMessage **)&jarg1; 
    result = (char *)(arg1)->getBody();
    
    {
        if(result) jresult = jenv->NewStringUTF(result); 
    }
    return jresult;
}


JNIEXPORT void JNICALL Java_com_bitwise_umail_uMailJNI_jMessage_1setTo(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    jMessage *arg1 = (jMessage *) 0 ;
    char *arg2 ;
    
    arg1 = *(jMessage **)&jarg1; 
    {
        arg2 = 0;
        if (jarg2) {
            arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
            if (!arg2) return ;
        }
    }
    (arg1)->setTo(arg2);
    
    {
        if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2); 
    }
}


JNIEXPORT void JNICALL Java_com_bitwise_umail_uMailJNI_jMessage_1setSubject(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    jMessage *arg1 = (jMessage *) 0 ;
    char *arg2 ;
    
    arg1 = *(jMessage **)&jarg1; 
    {
        arg2 = 0;
        if (jarg2) {
            arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
            if (!arg2) return ;
        }
    }
    (arg1)->setSubject(arg2);
    
    {
        if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2); 
    }
}


JNIEXPORT void JNICALL Java_com_bitwise_umail_uMailJNI_jMessage_1setBody(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    jMessage *arg1 = (jMessage *) 0 ;
    char *arg2 ;
    
    arg1 = *(jMessage **)&jarg1; 
    {
        arg2 = 0;
        if (jarg2) {
            arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
            if (!arg2) return ;
        }
    }
    (arg1)->setBody(arg2);
    
    {
        if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2); 
    }
}


JNIEXPORT jlong JNICALL Java_com_bitwise_umail_uMailJNI_jMessage_1_1getSentTime(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    jMessage *arg1 = (jMessage *) 0 ;
    jTime *result;
    
    arg1 = *(jMessage **)&jarg1; 
    result = (jTime *)(arg1)->_getSentTime();
    
    *(jTime **)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_com_bitwise_umail_uMailJNI_delete_1jMessage(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jMessage *arg1 = (jMessage *) 0 ;
    
    arg1 = *(jMessage **)&jarg1; 
    delete arg1;
    
}


JNIEXPORT jlong JNICALL Java_com_bitwise_umail_uMailJNI_new_1jAddressee(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    void *arg1 = (void *) 0 ;
    jAddressee *result;
    
    arg1 = *(void **)&jarg1; 
    result = (jAddressee *)new jAddressee(arg1);
    
    *(jAddressee **)&jresult = result; 
    return jresult;
}


JNIEXPORT jstring JNICALL Java_com_bitwise_umail_uMailJNI_jAddressee_1getAddress(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jstring jresult = 0 ;
    jAddressee *arg1 = (jAddressee *) 0 ;
    char *result;
    
    arg1 = *(jAddressee **)&jarg1; 
    result = (char *)(arg1)->getAddress();
    
    {
        if(result) jresult = jenv->NewStringUTF(result); 
    }
    return jresult;
}


JNIEXPORT void JNICALL Java_com_bitwise_umail_uMailJNI_delete_1jAddressee(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jAddressee *arg1 = (jAddressee *) 0 ;
    
    arg1 = *(jAddressee **)&jarg1; 
    delete arg1;
    
}


JNIEXPORT jlong JNICALL Java_com_bitwise_umail_uMailJNI_new_1jFolder_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    void *arg1 = (void *) 0 ;
    jFolder *result;
    
    arg1 = *(void **)&jarg1; 
    result = (jFolder *)new jFolder(arg1);
    
    *(jFolder **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_com_bitwise_umail_uMailJNI_new_1jFolder_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
    jlong jresult = 0 ;
    char *arg1 ;
    jFolder *result;
    
    {
        arg1 = 0;
        if (jarg1) {
            arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
            if (!arg1) return 0;
        }
    }
    result = (jFolder *)new jFolder(arg1);
    
    *(jFolder **)&jresult = result; 
    {
        if (arg1) jenv->ReleaseStringUTFChars(jarg1, arg1); 
    }
    return jresult;
}


JNIEXPORT jstring JNICALL Java_com_bitwise_umail_uMailJNI_jFolder_1getName(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jstring jresult = 0 ;
    jFolder *arg1 = (jFolder *) 0 ;
    char *result;
    
    arg1 = *(jFolder **)&jarg1; 
    result = (char *)(arg1)->getName();
    
    {
        if(result) jresult = jenv->NewStringUTF(result); 
    }
    return jresult;
}


JNIEXPORT void JNICALL Java_com_bitwise_umail_uMailJNI_jFolder_1add_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jFolder *arg1 = (jFolder *) 0 ;
    jMessage *arg2 = (jMessage *) 0 ;
    
    arg1 = *(jFolder **)&jarg1; 
    arg2 = *(jMessage **)&jarg2; 
    (arg1)->add(arg2);
    
}


JNIEXPORT void JNICALL Java_com_bitwise_umail_uMailJNI_jFolder_1add_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jFolder *arg1 = (jFolder *) 0 ;
    jFolder *arg2 = (jFolder *) 0 ;
    
    arg1 = *(jFolder **)&jarg1; 
    arg2 = *(jFolder **)&jarg2; 
    (arg1)->add(arg2);
    
}


JNIEXPORT jlong JNICALL Java_com_bitwise_umail_uMailJNI_jFolder_1getSubFolder_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    jlong jresult = 0 ;
    jFolder *arg1 = (jFolder *) 0 ;
    char *arg2 ;
    jFolder *result;
    
    arg1 = *(jFolder **)&jarg1; 
    {
        arg2 = 0;
        if (jarg2) {
            arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
            if (!arg2) return 0;
        }
    }
    result = (jFolder *)(arg1)->getSubFolder(arg2);
    
    *(jFolder **)&jresult = result; 
    {
        if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2); 
    }
    return jresult;
}


JNIEXPORT jlong JNICALL Java_com_bitwise_umail_uMailJNI_jFolder_1getSubFolder_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jboolean jarg3) {
    jlong jresult = 0 ;
    jFolder *arg1 = (jFolder *) 0 ;
    char *arg2 ;
    bool arg3 ;
    jFolder *result;
    
    arg1 = *(jFolder **)&jarg1; 
    {
        arg2 = 0;
        if (jarg2) {
            arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
            if (!arg2) return 0;
        }
    }
    arg3 = (bool)jarg3; 
    result = (jFolder *)(arg1)->getSubFolder(arg2,arg3);
    
    *(jFolder **)&jresult = result; 
    {
        if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2); 
    }
    return jresult;
}


JNIEXPORT void JNICALL Java_com_bitwise_umail_uMailJNI_jFolder_1remove(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jFolder *arg1 = (jFolder *) 0 ;
    int arg2 ;
    
    arg1 = *(jFolder **)&jarg1; 
    arg2 = (int)jarg2; 
    (arg1)->remove(arg2);
    
}


JNIEXPORT jint JNICALL Java_com_bitwise_umail_uMailJNI_jFolder_1getSize(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    jFolder *arg1 = (jFolder *) 0 ;
    int result;
    
    arg1 = *(jFolder **)&jarg1; 
    result = (int)(arg1)->getSize();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_com_bitwise_umail_uMailJNI_jFolder_1getMessages(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    jFolder *arg1 = (jFolder *) 0 ;
    uIterator *result;
    
    arg1 = *(jFolder **)&jarg1; 
    result = (uIterator *)(arg1)->getMessages();
    
    *(uIterator **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_com_bitwise_umail_uMailJNI_jFolder_1getParent(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    jFolder *arg1 = (jFolder *) 0 ;
    jFolder *result;
    
    arg1 = *(jFolder **)&jarg1; 
    result = (jFolder *)(arg1)->getParent();
    
    *(jFolder **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_com_bitwise_umail_uMailJNI_jFolder_1getSubFolders(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    jFolder *arg1 = (jFolder *) 0 ;
    uIterator *result;
    
    arg1 = *(jFolder **)&jarg1; 
    result = (uIterator *)(arg1)->getSubFolders();
    
    *(uIterator **)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_com_bitwise_umail_uMailJNI_delete_1jFolder(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jFolder *arg1 = (jFolder *) 0 ;
    
    arg1 = *(jFolder **)&jarg1; 
    delete arg1;
    
}


JNIEXPORT jlong JNICALL Java_com_bitwise_umail_uMailJNI_new_1jAccount(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    void *arg1 = (void *) 0 ;
    jAccount *result;
    
    arg1 = *(void **)&jarg1; 
    result = (jAccount *)new jAccount(arg1);
    
    *(jAccount **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_com_bitwise_umail_uMailJNI_jAccount_1getRoot(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    jAccount *arg1 = (jAccount *) 0 ;
    jFolder *result;
    
    arg1 = *(jAccount **)&jarg1; 
    result = (jFolder *)(arg1)->getRoot();
    
    *(jFolder **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_com_bitwise_umail_uMailJNI_jAccount_1getUser(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    jAccount *arg1 = (jAccount *) 0 ;
    jAddressee *result;
    
    arg1 = *(jAccount **)&jarg1; 
    result = (jAddressee *)(arg1)->getUser();
    
    *(jAddressee **)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_com_bitwise_umail_uMailJNI_jAccount_1log(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    jAccount *arg1 = (jAccount *) 0 ;
    char *arg2 ;
    
    arg1 = *(jAccount **)&jarg1; 
    {
        arg2 = 0;
        if (jarg2) {
            arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
            if (!arg2) return ;
        }
    }
    (arg1)->log(arg2);
    
    {
        if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2); 
    }
}


JNIEXPORT void JNICALL Java_com_bitwise_umail_uMailJNI_delete_1jAccount(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jAccount *arg1 = (jAccount *) 0 ;
    
    arg1 = *(jAccount **)&jarg1; 
    delete arg1;
    
}


JNIEXPORT jlong JNICALL Java_com_bitwise_umail_uMailJNI_new_1jMenu(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    void *arg1 = (void *) 0 ;
    jMenu *result;
    
    arg1 = *(void **)&jarg1; 
    result = (jMenu *)new jMenu(arg1);
    
    *(jMenu **)&jresult = result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_com_bitwise_umail_uMailJNI_jMenu_1getSize(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    jMenu *arg1 = (jMenu *) 0 ;
    int result;
    
    arg1 = *(jMenu **)&jarg1; 
    result = (int)(arg1)->getSize();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_com_bitwise_umail_uMailJNI_jMenu_1go(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jMenu *arg1 = (jMenu *) 0 ;
    
    arg1 = *(jMenu **)&jarg1; 
    (arg1)->go();
    
}


JNIEXPORT void JNICALL Java_com_bitwise_umail_uMailJNI_jMenu_1append(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jMenu *arg1 = (jMenu *) 0 ;
    jType *arg2 = (jType *) 0 ;
    
    arg1 = *(jMenu **)&jarg1; 
    arg2 = *(jType **)&jarg2; 
    (arg1)->append(arg2);
    
}


JNIEXPORT void JNICALL Java_com_bitwise_umail_uMailJNI_delete_1jMenu(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jMenu *arg1 = (jMenu *) 0 ;
    
    arg1 = *(jMenu **)&jarg1; 
    delete arg1;
    
}


JNIEXPORT jlong JNICALL Java_com_bitwise_umail_uMailJNI_new_1jMenuOption_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    void *arg1 = (void *) 0 ;
    jMenuOption *result;
    
    arg1 = *(void **)&jarg1; 
    result = (jMenuOption *)new jMenuOption(arg1);
    
    *(jMenuOption **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_com_bitwise_umail_uMailJNI_new_1jMenuOption_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
    jlong jresult = 0 ;
    char *arg1 ;
    char *arg2 ;
    jMenuOption *result;
    
    {
        arg1 = 0;
        if (jarg1) {
            arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
            if (!arg1) return 0;
        }
    }
    {
        arg2 = 0;
        if (jarg2) {
            arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
            if (!arg2) return 0;
        }
    }
    result = (jMenuOption *)new jMenuOption(arg1,arg2);
    
    *(jMenuOption **)&jresult = result; 
    {
        if (arg1) jenv->ReleaseStringUTFChars(jarg1, arg1); 
    }
    {
        if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2); 
    }
    return jresult;
}


JNIEXPORT jstring JNICALL Java_com_bitwise_umail_uMailJNI_jMenuOption_1getDisplayText(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jstring jresult = 0 ;
    jMenuOption *arg1 = (jMenuOption *) 0 ;
    char *result;
    
    arg1 = *(jMenuOption **)&jarg1; 
    result = (char *)(arg1)->getDisplayText();
    
    {
        if(result) jresult = jenv->NewStringUTF(result); 
    }
    return jresult;
}


JNIEXPORT void JNICALL Java_com_bitwise_umail_uMailJNI_delete_1jMenuOption(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jMenuOption *arg1 = (jMenuOption *) 0 ;
    
    arg1 = *(jMenuOption **)&jarg1; 
    delete arg1;
    
}


JNIEXPORT jlong JNICALL Java_com_bitwise_umail_uMailJNI_new_1jFolderMenuOption_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    void *arg1 = (void *) 0 ;
    jFolderMenuOption *result;
    
    arg1 = *(void **)&jarg1; 
    result = (jFolderMenuOption *)new jFolderMenuOption(arg1);
    
    *(jFolderMenuOption **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_com_bitwise_umail_uMailJNI_new_1jFolderMenuOption_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2) {
    jlong jresult = 0 ;
    char *arg1 ;
    jFolder *arg2 = (jFolder *) 0 ;
    jFolderMenuOption *result;
    
    {
        arg1 = 0;
        if (jarg1) {
            arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
            if (!arg1) return 0;
        }
    }
    arg2 = *(jFolder **)&jarg2; 
    result = (jFolderMenuOption *)new jFolderMenuOption(arg1,arg2);
    
    *(jFolderMenuOption **)&jresult = result; 
    {
        if (arg1) jenv->ReleaseStringUTFChars(jarg1, arg1); 
    }
    return jresult;
}


JNIEXPORT jstring JNICALL Java_com_bitwise_umail_uMailJNI_jFolderMenuOption_1getDisplayText(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jstring jresult = 0 ;
    jFolderMenuOption *arg1 = (jFolderMenuOption *) 0 ;
    char *result;
    
    arg1 = *(jFolderMenuOption **)&jarg1; 
    result = (char *)(arg1)->getDisplayText();
    
    {
        if(result) jresult = jenv->NewStringUTF(result); 
    }
    return jresult;
}


JNIEXPORT void JNICALL Java_com_bitwise_umail_uMailJNI_delete_1jFolderMenuOption(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jFolderMenuOption *arg1 = (jFolderMenuOption *) 0 ;
    
    arg1 = *(jFolderMenuOption **)&jarg1; 
    delete arg1;
    
}


JNIEXPORT jlong JNICALL Java_com_bitwise_umail_uMailJNI_new_1jMessageMenuOption_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    void *arg1 = (void *) 0 ;
    jMessageMenuOption *result;
    
    arg1 = *(void **)&jarg1; 
    result = (jMessageMenuOption *)new jMessageMenuOption(arg1);
    
    *(jMessageMenuOption **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_com_bitwise_umail_uMailJNI_new_1jMessageMenuOption_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2) {
    jlong jresult = 0 ;
    char *arg1 ;
    jMessage *arg2 = (jMessage *) 0 ;
    jMessageMenuOption *result;
    
    {
        arg1 = 0;
        if (jarg1) {
            arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
            if (!arg1) return 0;
        }
    }
    arg2 = *(jMessage **)&jarg2; 
    result = (jMessageMenuOption *)new jMessageMenuOption(arg1,arg2);
    
    *(jMessageMenuOption **)&jresult = result; 
    {
        if (arg1) jenv->ReleaseStringUTFChars(jarg1, arg1); 
    }
    return jresult;
}


JNIEXPORT jstring JNICALL Java_com_bitwise_umail_uMailJNI_jMessageMenuOption_1getDisplayText(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jstring jresult = 0 ;
    jMessageMenuOption *arg1 = (jMessageMenuOption *) 0 ;
    char *result;
    
    arg1 = *(jMessageMenuOption **)&jarg1; 
    result = (char *)(arg1)->getDisplayText();
    
    {
        if(result) jresult = jenv->NewStringUTF(result); 
    }
    return jresult;
}


JNIEXPORT void JNICALL Java_com_bitwise_umail_uMailJNI_delete_1jMessageMenuOption(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jMessageMenuOption *arg1 = (jMessageMenuOption *) 0 ;
    
    arg1 = *(jMessageMenuOption **)&jarg1; 
    delete arg1;
    
}


JNIEXPORT jlong JNICALL Java_com_bitwise_umail_uMailJNI_new_1jFolderMenuPlugin_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    void *arg1 = (void *) 0 ;
    jFolderMenuPlugin *result;
    
    arg1 = *(void **)&jarg1; 
    result = (jFolderMenuPlugin *)new jFolderMenuPlugin(arg1);
    
    *(jFolderMenuPlugin **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_com_bitwise_umail_uMailJNI_new_1jFolderMenuPlugin_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jstring jarg3) {
    jlong jresult = 0 ;
    char *arg1 ;
    jFolder *arg2 = (jFolder *) 0 ;
    char *arg3 ;
    jFolderMenuPlugin *result;
    
    {
        arg1 = 0;
        if (jarg1) {
            arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
            if (!arg1) return 0;
        }
    }
    arg2 = *(jFolder **)&jarg2; 
    {
        arg3 = 0;
        if (jarg3) {
            arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
            if (!arg3) return 0;
        }
    }
    result = (jFolderMenuPlugin *)new jFolderMenuPlugin(arg1,arg2,arg3);
    
    *(jFolderMenuPlugin **)&jresult = result; 
    {
        if (arg1) jenv->ReleaseStringUTFChars(jarg1, arg1); 
    }
    {
        if (arg3) jenv->ReleaseStringUTFChars(jarg3, arg3); 
    }
    return jresult;
}


JNIEXPORT jstring JNICALL Java_com_bitwise_umail_uMailJNI_jFolderMenuPlugin_1getDisplayText(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jstring jresult = 0 ;
    jFolderMenuPlugin *arg1 = (jFolderMenuPlugin *) 0 ;
    char *result;
    
    arg1 = *(jFolderMenuPlugin **)&jarg1; 
    result = (char *)(arg1)->getDisplayText();
    
    {
        if(result) jresult = jenv->NewStringUTF(result); 
    }
    return jresult;
}


JNIEXPORT void JNICALL Java_com_bitwise_umail_uMailJNI_delete_1jFolderMenuPlugin(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jFolderMenuPlugin *arg1 = (jFolderMenuPlugin *) 0 ;
    
    arg1 = *(jFolderMenuPlugin **)&jarg1; 
    delete arg1;
    
}


JNIEXPORT jlong JNICALL Java_com_bitwise_umail_uMailJNI_new_1jPrompt_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    void *arg1 = (void *) 0 ;
    jPrompt *result;
    
    arg1 = *(void **)&jarg1; 
    result = (jPrompt *)new jPrompt(arg1);
    
    *(jPrompt **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_com_bitwise_umail_uMailJNI_new_1jPrompt_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jboolean jarg2) {
    jlong jresult = 0 ;
    char *arg1 ;
    bool arg2 ;
    jPrompt *result;
    
    {
        arg1 = 0;
        if (jarg1) {
            arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
            if (!arg1) return 0;
        }
    }
    arg2 = (bool)jarg2; 
    result = (jPrompt *)new jPrompt(arg1,arg2);
    
    *(jPrompt **)&jresult = result; 
    {
        if (arg1) jenv->ReleaseStringUTFChars(jarg1, arg1); 
    }
    return jresult;
}


JNIEXPORT jstring JNICALL Java_com_bitwise_umail_uMailJNI_jPrompt_1askUser_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jstring jresult = 0 ;
    jPrompt *arg1 = (jPrompt *) 0 ;
    char *result;
    
    arg1 = *(jPrompt **)&jarg1; 
    result = (char *)(arg1)->askUser();
    
    {
        if(result) jresult = jenv->NewStringUTF(result); 
    }
    return jresult;
}


JNIEXPORT jstring JNICALL Java_com_bitwise_umail_uMailJNI_jPrompt_1askUser_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    jstring jresult = 0 ;
    jPrompt *arg1 = (jPrompt *) 0 ;
    char *arg2 ;
    char *result;
    
    arg1 = *(jPrompt **)&jarg1; 
    {
        arg2 = 0;
        if (jarg2) {
            arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
            if (!arg2) return 0;
        }
    }
    result = (char *)(arg1)->askUser(arg2);
    
    {
        if(result) jresult = jenv->NewStringUTF(result); 
    }
    {
        if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2); 
    }
    return jresult;
}


JNIEXPORT void JNICALL Java_com_bitwise_umail_uMailJNI_delete_1jPrompt(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jPrompt *arg1 = (jPrompt *) 0 ;
    
    arg1 = *(jPrompt **)&jarg1; 
    delete arg1;
    
}


JNIEXPORT jlong JNICALL Java_com_bitwise_umail_uMailJNI_new_1jMessageInput(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    void *arg1 = (void *) 0 ;
    jMessageInput *result;
    
    arg1 = *(void **)&jarg1; 
    result = (jMessageInput *)new jMessageInput(arg1);
    
    *(jMessageInput **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_com_bitwise_umail_uMailJNI_jMessageInput_1getToPrompt(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    jMessageInput *arg1 = (jMessageInput *) 0 ;
    jPrompt *result;
    
    arg1 = *(jMessageInput **)&jarg1; 
    result = (jPrompt *)(arg1)->getToPrompt();
    
    *(jPrompt **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_com_bitwise_umail_uMailJNI_jMessageInput_1getSubjectPrompt(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    jMessageInput *arg1 = (jMessageInput *) 0 ;
    jPrompt *result;
    
    arg1 = *(jMessageInput **)&jarg1; 
    result = (jPrompt *)(arg1)->getSubjectPrompt();
    
    *(jPrompt **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_com_bitwise_umail_uMailJNI_jMessageInput_1getBodyPrompt(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    jMessageInput *arg1 = (jMessageInput *) 0 ;
    jPrompt *result;
    
    arg1 = *(jMessageInput **)&jarg1; 
    result = (jPrompt *)(arg1)->getBodyPrompt();
    
    *(jPrompt **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_com_bitwise_umail_uMailJNI_jMessageInput_1getMessage(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    jMessageInput *arg1 = (jMessageInput *) 0 ;
    jMessage *result;
    
    arg1 = *(jMessageInput **)&jarg1; 
    result = (jMessage *)(arg1)->getMessage();
    
    *(jMessage **)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_com_bitwise_umail_uMailJNI_delete_1jMessageInput(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jMessageInput *arg1 = (jMessageInput *) 0 ;
    
    arg1 = *(jMessageInput **)&jarg1; 
    delete arg1;
    
}


JNIEXPORT jlong JNICALL Java_com_bitwise_umail_uMailJNI_new_1jDataDisplay(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    void *arg1 = (void *) 0 ;
    jDataDisplay *result;
    
    arg1 = *(void **)&jarg1; 
    result = (jDataDisplay *)new jDataDisplay(arg1);
    
    *(jDataDisplay **)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_com_bitwise_umail_uMailJNI_jDataDisplay_1setLabel(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    jDataDisplay *arg1 = (jDataDisplay *) 0 ;
    char *arg2 ;
    
    arg1 = *(jDataDisplay **)&jarg1; 
    {
        arg2 = 0;
        if (jarg2) {
            arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
            if (!arg2) return ;
        }
    }
    (arg1)->setLabel(arg2);
    
    {
        if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2); 
    }
}


JNIEXPORT void JNICALL Java_com_bitwise_umail_uMailJNI_jDataDisplay_1setValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    jDataDisplay *arg1 = (jDataDisplay *) 0 ;
    char *arg2 ;
    
    arg1 = *(jDataDisplay **)&jarg1; 
    {
        arg2 = 0;
        if (jarg2) {
            arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
            if (!arg2) return ;
        }
    }
    (arg1)->setValue(arg2);
    
    {
        if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2); 
    }
}


JNIEXPORT void JNICALL Java_com_bitwise_umail_uMailJNI_jDataDisplay_1display(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jDataDisplay *arg1 = (jDataDisplay *) 0 ;
    
    arg1 = *(jDataDisplay **)&jarg1; 
    (arg1)->display();
    
}


JNIEXPORT void JNICALL Java_com_bitwise_umail_uMailJNI_delete_1jDataDisplay(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jDataDisplay *arg1 = (jDataDisplay *) 0 ;
    
    arg1 = *(jDataDisplay **)&jarg1; 
    delete arg1;
    
}


JNIEXPORT jlong JNICALL Java_com_bitwise_umail_uMailJNI_new_1jMessageDisplay(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    void *arg1 = (void *) 0 ;
    jMessageDisplay *result;
    
    arg1 = *(void **)&jarg1; 
    result = (jMessageDisplay *)new jMessageDisplay(arg1);
    
    *(jMessageDisplay **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_com_bitwise_umail_uMailJNI_jMessageDisplay_1getFrom(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    jMessageDisplay *arg1 = (jMessageDisplay *) 0 ;
    jDataDisplay *result;
    
    arg1 = *(jMessageDisplay **)&jarg1; 
    result = (jDataDisplay *)(arg1)->getFrom();
    
    *(jDataDisplay **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_com_bitwise_umail_uMailJNI_jMessageDisplay_1getSubject(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    jMessageDisplay *arg1 = (jMessageDisplay *) 0 ;
    jDataDisplay *result;
    
    arg1 = *(jMessageDisplay **)&jarg1; 
    result = (jDataDisplay *)(arg1)->getSubject();
    
    *(jDataDisplay **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_com_bitwise_umail_uMailJNI_jMessageDisplay_1getBody(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    jMessageDisplay *arg1 = (jMessageDisplay *) 0 ;
    jDataDisplay *result;
    
    arg1 = *(jMessageDisplay **)&jarg1; 
    result = (jDataDisplay *)(arg1)->getBody();
    
    *(jDataDisplay **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_com_bitwise_umail_uMailJNI_jMessageDisplay_1getSentTime(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    jMessageDisplay *arg1 = (jMessageDisplay *) 0 ;
    jDataDisplay *result;
    
    arg1 = *(jMessageDisplay **)&jarg1; 
    result = (jDataDisplay *)(arg1)->getSentTime();
    
    *(jDataDisplay **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_com_bitwise_umail_uMailJNI_jMessageDisplay_1getMessage(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    jMessageDisplay *arg1 = (jMessageDisplay *) 0 ;
    jMessage *result;
    
    arg1 = *(jMessageDisplay **)&jarg1; 
    result = (jMessage *)(arg1)->getMessage();
    
    *(jMessage **)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_com_bitwise_umail_uMailJNI_jMessageDisplay_1initValues(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jMessageDisplay *arg1 = (jMessageDisplay *) 0 ;
    
    arg1 = *(jMessageDisplay **)&jarg1; 
    (arg1)->initValues();
    
}


JNIEXPORT void JNICALL Java_com_bitwise_umail_uMailJNI_jMessageDisplay_1align(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jMessageDisplay *arg1 = (jMessageDisplay *) 0 ;
    
    arg1 = *(jMessageDisplay **)&jarg1; 
    (arg1)->align();
    
}


JNIEXPORT void JNICALL Java_com_bitwise_umail_uMailJNI_delete_1jMessageDisplay(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jMessageDisplay *arg1 = (jMessageDisplay *) 0 ;
    
    arg1 = *(jMessageDisplay **)&jarg1; 
    delete arg1;
    
}


JNIEXPORT jlong JNICALL Java_com_bitwise_umail_uMailJNI_new_1List(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    List *result;
    
    result = (List *)new List();
    
    *(List **)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_com_bitwise_umail_uMailJNI_List_1append(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    List *arg1 = (List *) 0 ;
    void *arg2 = (void *) 0 ;
    
    arg1 = *(List **)&jarg1; 
    arg2 = *(void **)&jarg2; 
    (arg1)->append(arg2);
    
}


JNIEXPORT jint JNICALL Java_com_bitwise_umail_uMailJNI_List_1getSize(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    List *arg1 = (List *) 0 ;
    int result;
    
    arg1 = *(List **)&jarg1; 
    result = (int)(arg1)->getSize();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_com_bitwise_umail_uMailJNI_List_1iterator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    List *arg1 = (List *) 0 ;
    ListIterator *result;
    
    arg1 = *(List **)&jarg1; 
    result = (ListIterator *)(arg1)->iterator();
    
    *(ListIterator **)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_com_bitwise_umail_uMailJNI_List_1shrink(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    List *arg1 = (List *) 0 ;
    
    arg1 = *(List **)&jarg1; 
    (arg1)->shrink();
    
}


JNIEXPORT void JNICALL Java_com_bitwise_umail_uMailJNI_delete_1List(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    List *arg1 = (List *) 0 ;
    
    arg1 = *(List **)&jarg1; 
    delete arg1;
    
}


JNIEXPORT jboolean JNICALL Java_com_bitwise_umail_uMailJNI_ListIterator_1hasNext(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jboolean jresult = 0 ;
    ListIterator *arg1 = (ListIterator *) 0 ;
    bool result;
    
    arg1 = *(ListIterator **)&jarg1; 
    result = (bool)(arg1)->hasNext();
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jobject JNICALL Java_com_bitwise_umail_uMailJNI_ListIterator_1next(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jobject jresult = 0 ;
    ListIterator *arg1 = (ListIterator *) 0 ;
    jobject result;
    
    arg1 = *(ListIterator **)&jarg1; 
    result = (arg1)->next();
    
    jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_com_bitwise_umail_uMailJNI_ListIterator_1getNext(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    ListIterator *arg1 = (ListIterator *) 0 ;
    void *result;
    
    arg1 = *(ListIterator **)&jarg1; 
    result = (void *)(arg1)->getNext();
    
    *(void **)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_com_bitwise_umail_uMailJNI_ListIterator_1remove(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    ListIterator *arg1 = (ListIterator *) 0 ;
    
    arg1 = *(ListIterator **)&jarg1; 
    (arg1)->remove();
    
}


JNIEXPORT jlong JNICALL Java_com_bitwise_umail_uMailJNI_new_1ListIterator(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    ListIterator *result;
    
    result = (ListIterator *)new ListIterator();
    
    *(ListIterator **)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_com_bitwise_umail_uMailJNI_delete_1ListIterator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    ListIterator *arg1 = (ListIterator *) 0 ;
    
    arg1 = *(ListIterator **)&jarg1; 
    delete arg1;
    
}


JNIEXPORT jlong JNICALL Java_com_bitwise_umail_uMailJNI_new_1jVector(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    jVector *result;
    
    result = (jVector *)new jVector();
    
    *(jVector **)&jresult = result; 
    return jresult;
}


JNIEXPORT jobject JNICALL Java_com_bitwise_umail_uMailJNI_jVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jobject jresult = 0 ;
    jVector *arg1 = (jVector *) 0 ;
    int arg2 ;
    jobject result;
    
    arg1 = *(jVector **)&jarg1; 
    arg2 = (int)jarg2; 
    result = (arg1)->get(arg2);
    
    jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_com_bitwise_umail_uMailJNI_jVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jobject jarg3) {
    jVector *arg1 = (jVector *) 0 ;
    int arg2 ;
    jobject arg3 ;
    
    arg1 = *(jVector **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = jarg3; 
    (arg1)->set(arg2,arg3);
    
}


JNIEXPORT void JNICALL Java_com_bitwise_umail_uMailJNI_jVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg2) {
    jVector *arg1 = (jVector *) 0 ;
    jobject arg2 ;
    
    arg1 = *(jVector **)&jarg1; 
    arg2 = jarg2; 
    (arg1)->add(arg2);
    
}


JNIEXPORT void JNICALL Java_com_bitwise_umail_uMailJNI_jVector_1remove(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jVector *arg1 = (jVector *) 0 ;
    int arg2 ;
    
    arg1 = *(jVector **)&jarg1; 
    arg2 = (int)jarg2; 
    (arg1)->remove(arg2);
    
}


JNIEXPORT jint JNICALL Java_com_bitwise_umail_uMailJNI_jVector_1getSize(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    jVector *arg1 = (jVector *) 0 ;
    int result;
    
    arg1 = *(jVector **)&jarg1; 
    result = (int)(arg1)->getSize();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_com_bitwise_umail_uMailJNI_jVector_1iterator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    jVector *arg1 = (jVector *) 0 ;
    uIterator *result;
    
    arg1 = *(jVector **)&jarg1; 
    result = (uIterator *)(arg1)->iterator();
    
    *(uIterator **)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_com_bitwise_umail_uMailJNI_delete_1jVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jVector *arg1 = (jVector *) 0 ;
    
    arg1 = *(jVector **)&jarg1; 
    delete arg1;
    
}


JNIEXPORT jlong JNICALL Java_com_bitwise_umail_uMailJNI_SWIGjMessageTojType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    *(jType **)&baseptr = (jMessage *)*(void**)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_com_bitwise_umail_uMailJNI_SWIGjAddresseeTojType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    *(jType **)&baseptr = (jAddressee *)*(void**)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_com_bitwise_umail_uMailJNI_SWIGjFolderTojType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    *(jType **)&baseptr = (jFolder *)*(void**)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_com_bitwise_umail_uMailJNI_SWIGjAccountTojType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    *(jType **)&baseptr = (jAccount *)*(void**)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_com_bitwise_umail_uMailJNI_SWIGjMenuTojType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    *(jType **)&baseptr = (jMenu *)*(void**)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_com_bitwise_umail_uMailJNI_SWIGjMenuOptionTojType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    *(jType **)&baseptr = (jMenuOption *)*(void**)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_com_bitwise_umail_uMailJNI_SWIGjFolderMenuOptionTojType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    *(jType **)&baseptr = (jFolderMenuOption *)*(void**)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_com_bitwise_umail_uMailJNI_SWIGjMessageMenuOptionTojType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    *(jType **)&baseptr = (jMessageMenuOption *)*(void**)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_com_bitwise_umail_uMailJNI_SWIGjFolderMenuPluginTojType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    *(jType **)&baseptr = (jFolderMenuPlugin *)*(void**)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_com_bitwise_umail_uMailJNI_SWIGjPromptTojType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    *(jType **)&baseptr = (jPrompt *)*(void**)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_com_bitwise_umail_uMailJNI_SWIGjMessageInputTojType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    *(jType **)&baseptr = (jMessageInput *)*(void**)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_com_bitwise_umail_uMailJNI_SWIGjDataDisplayTojType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    *(jType **)&baseptr = (jDataDisplay *)*(void**)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_com_bitwise_umail_uMailJNI_SWIGjMessageDisplayTojType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    *(jType **)&baseptr = (jMessageDisplay *)*(void**)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_com_bitwise_umail_uMailJNI_SWIGListIteratorTouIterator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    *(uIterator **)&baseptr = (ListIterator *)*(void**)&jarg1;
    return baseptr;
}

#ifdef __cplusplus
}
#endif

