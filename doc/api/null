Loading source file ../../decaf/com/bitwise/decaf/editor/DTextField.java...
Loading source file ../../decaf/com/bitwise/decaf/editor/DTypeBox.java...
Loading source file ../../decaf/com/bitwise/decaf/editor/DecafTextComponent.java...
Loading source file ../../decaf/com/bitwise/decaf/editor/DecafTypeComponent.java...
Loading source file ../../decaf/com/bitwise/decaf/editor/MaskComponent.java...
Loading source file ../../decaf/com/bitwise/decaf/editor/Type.java...
Loading source file ../../decaf/com/bitwise/decaf/editor/Utils.java...
Loading source file ../../decaf/com/bitwise/decaf/editor/PrimitiveType.java...
Loading source file ../../decaf/com/bitwise/decaf/editor/Mask.java...
Loading source file ../../decaf/com/bitwise/decaf/editor/Form.java...
Loading source file ../../decaf/com/bitwise/decaf/editor/Decaf.java...
Loading source file ../../decaf/com/bitwise/decaf/editor/Typed.java...
Loading source file ../../decaf/com/bitwise/decaf/editor/grammar/CodeNode.java...
Loading source file ../../decaf/com/bitwise/decaf/editor/grammar/EnforcementOfficer.java...
Loading source file ../../decaf/com/bitwise/decaf/editor/grammar/Grammar.java...
Loading source file ../../decaf/com/bitwise/decaf/editor/grammar/GrammarMask.java...
Loading source file ../../decaf/com/bitwise/decaf/editor/grammar/Officer.java...
Loading source file ../../decaf/com/bitwise/decaf/editor/grammar/Paragraph.java...
Loading source file ../../decaf/com/bitwise/decaf/editor/grammar/ParagraphBox.java...
Loading source file ../../decaf/com/bitwise/decaf/editor/grammar/Phrase.java...
Loading source file ../../decaf/com/bitwise/decaf/editor/grammar/PhraseBox.java...
Loading source file ../../decaf/com/bitwise/decaf/editor/grammar/Sentence.java...
Loading source file ../../decaf/com/bitwise/decaf/editor/grammar/TypeOfficer.java...
Loading source files for package org.hs.jfc...
Loading source files for package org.hs.generator...
Constructing Javadoc information...
Standard Doclet version 1.4.1

Generating .\constant-values.html...
Building tree for all the packages and classes...
Generating .\com\bitwise\decaf\editor\class-use\DTextField.html...
Generating .\com\bitwise\decaf\editor\class-use\DTypeBox.html...
Generating .\com\bitwise\decaf\editor\class-use\DecafTextComponent.html...
Generating .\com\bitwise\decaf\editor\class-use\DecafTypeComponent.html...
Generating .\com\bitwise\decaf\editor\class-use\MaskComponent.html...
Generating .\com\bitwise\decaf\editor\class-use\Type.html...
Generating .\com\bitwise\decaf\editor\class-use\Type.MethodsByName.html...
Generating .\com\bitwise\decaf\editor\class-use\Type.FieldsByName.html...
Generating .\com\bitwise\decaf\editor\class-use\Type.Cache.html...
Generating .\com\bitwise\decaf\editor\class-use\Type.CacheKey.html...
Generating .\com\bitwise\decaf\editor\class-use\Type.NoType.html...
Generating .\com\bitwise\decaf\editor\class-use\Type.VoidType.html...
Generating .\com\bitwise\decaf\editor\class-use\Type.Field.html...
Generating .\com\bitwise\decaf\editor\class-use\Utils.html...
Generating .\com\bitwise\decaf\editor\class-use\Utils.CollectionMap.html...
Generating .\com\bitwise\decaf\editor\class-use\Utils.EmptyVector.html...
Generating .\com\bitwise\decaf\editor\class-use\Utils.List.html...
Generating .\com\bitwise\decaf\editor\class-use\Utils.List.Event.html...
Generating .\com\bitwise\decaf\editor\class-use\Utils.List.Listener.html...
Generating .\com\bitwise\decaf\editor\class-use\Utils.ListModel.html...
Generating .\com\bitwise\decaf\editor\class-use\Utils.Renderable.html...
Generating .\com\bitwise\decaf\editor\class-use\Utils.RenderPanel.html...
Generating .\com\bitwise\decaf\editor\class-use\Utils.RenderLabel.html...
Generating .\com\bitwise\decaf\editor\class-use\Utils.SerialVector.html...
Generating .\com\bitwise\decaf\editor\class-use\Utils.Location.html...
Generating .\com\bitwise\decaf\editor\class-use\Utils.RealEstateManager.html...
Generating .\com\bitwise\decaf\editor\class-use\Utils.SerialException.html...
Generating .\com\bitwise\decaf\editor\class-use\PrimitiveType.html...
Generating .\com\bitwise\decaf\editor\class-use\Mask.html...
Generating .\com\bitwise\decaf\editor\class-use\Form.html...
Generating .\com\bitwise\decaf\editor\class-use\Decaf.html...
Generating .\com\bitwise\decaf\editor\class-use\Typed.html...
Generating .\com\bitwise\decaf\editor\grammar\class-use\CodeNode.html...
Generating .\com\bitwise\decaf\editor\grammar\class-use\CodeNode.Listener.html...
Generating .\com\bitwise\decaf\editor\grammar\class-use\CodeNode.Event.html...
Generating .\com\bitwise\decaf\editor\grammar\class-use\EnforcementOfficer.html...
Generating .\com\bitwise\decaf\editor\grammar\class-use\EnforcementOfficer.ViolationWindow.html...
Generating .\com\bitwise\decaf\editor\grammar\class-use\Grammar.html...
Generating .\com\bitwise\decaf\editor\grammar\class-use\Grammar.Content.html...
Generating .\com\bitwise\decaf\editor\grammar\class-use\Grammar.ClassReference.html...
Generating .\com\bitwise\decaf\editor\grammar\class-use\GrammarMask.html...
Generating .\com\bitwise\decaf\editor\grammar\class-use\Officer.html...
Generating .\com\bitwise\decaf\editor\grammar\class-use\Officer.Foreign.html...
Generating .\com\bitwise\decaf\editor\grammar\class-use\Officer.Deputy.html...
Generating .\com\bitwise\decaf\editor\grammar\class-use\Paragraph.html...
Generating .\com\bitwise\decaf\editor\grammar\class-use\ParagraphBox.html...
Generating .\com\bitwise\decaf\editor\grammar\class-use\Phrase.html...
Generating .\com\bitwise\decaf\editor\grammar\class-use\Phrase.TypeChameleon.html...
Generating .\com\bitwise\decaf\editor\grammar\class-use\PhraseBox.html...
Generating .\com\bitwise\decaf\editor\grammar\class-use\Sentence.html...
Generating .\com\bitwise\decaf\editor\grammar\class-use\TypeOfficer.html...
Generating .\org\hs\jfc\class-use\CursorCenter.html...
Generating .\org\hs\jfc\class-use\CursorCenter.Descriptor.html...
Generating .\org\hs\jfc\class-use\HotComponent.HotCollection.html...
Generating .\org\hs\jfc\class-use\HotComponent.Arbiter.html...
"Register this ParagraphBox with <code>arbiter</code> as follows:
 "
This sentence is different from what will be interpreted as the first sentence in the
next major release (when that interpretation will be internationalized), which is:
"Register this ParagraphBox with <code>arbiter</code> as follows:
 <p>
 <u>offer</u><br>
 1) GVariable by any operation, defaulting to {@link HotComponent#LINK}<br>
 2) GExpression by {@link HotComponent#MOVE} | {@link HotComponent#COPY}, defaulting to {@link HotComponent#COPY}<br>
 3) GStatement by {@link HotComponent#MOVE} | {@link HotComponent#COPY}, defaulting to {@link HotComponent#MOVE}<br>
 <p>
 <u>receive</u><br>
 1) GVariable by {@link HotComponent#MOVE} | {@link HotComponent#COPY}<br>
 2) GStatement by {@link HotComponent#MOVE} | {@link HotComponent#COPY}<br>"
To avoid this note, change the doc comment to make this a proper first sentence, then
use -breakiterator from that point forward, which will output this new sentence.
"Register this PhraseBox with <code>arbiter</code> as follows:
 "
This sentence is different from what would be generated using -breakiterator: 
"Register this PhraseBox with <code>arbiter</code> as follows:
 <p>
 <u>receive</u><br>
 1) GVariable by {@link HotComponent#LINK}<br>
 2) GExpression by {@link HotComponent#MOVE} | {@link HotComponent#COPY}"
Generating .\org\hs\jfc\class-use\HotComponent.Constraints.html...
Generating .\org\hs\jfc\class-use\HotStation.html...
Generating .\org\hs\jfc\class-use\hVector.html...
Generating .\org\hs\jfc\class-use\FormLayout.html...
Generating .\org\hs\jfc\class-use\FormPanel.html...
Generating .\org\hs\jfc\class-use\HotComponent.html...
Generating .\org\hs\generator\class-use\GVariableList.html...
Generating .\org\hs\generator\class-use\GComparison.html...
Generating .\org\hs\generator\class-use\GComment.html...
Generating .\org\hs\generator\class-use\GStepwise.html...
Generating .\org\hs\generator\class-use\GArrayAccess.html...
Generating .\org\hs\generator\class-use\GSynchronized.html...
Generating .\org\hs\generator\class-use\GThrow.html...
Generating .\org\hs\generator\class-use\GReference.html...
Generating .\org\hs\generator\class-use\GExpression.html...
"GArrayAccess represents an expression in which a base expression of 
 array type is accessed with an int-valued expression in square brackets, e.g.: 
 "
This sentence is different from what would be generated using -breakiterator: 
"GArrayAccess represents an expression in which a base expression of 
 array type is accessed with an int-valued expression in square brackets, e.g.: 
 <P>
 <code>

	int[] numbers = new int[] {0,1,2,3,4,5};<br>
	System.err.println(numbers[3]);	// a GArrayAccess represents 'numbers[3]'

 </code><br>
 <P>
	Multi-dimensional arrays are represented with nested GArrayAccess expressions,
 such that the field <code>array</code> of one GArrayAccess is itself a GArrayAccess."
"GBinary represents an assortment of binary (i.e., two-sided) expressions which includes:"
This sentence is different from what would be generated using -breakiterator: 
"GBinary represents an assortment of binary (i.e., two-sided) expressions which includes:<p>
 <code>
 =<br>
 +, -, *, /<br>
 +=, -=, *=, /=<br>
 <<, >>, >>><br>
 <<=, <<=, >>>=<br>
 &, |, ^<br> 
 &=, |=, ^=<br>
</code>
<p>
	Assignment is indicated with the boolean <code>compoundAssignment</code> field.  "
"A boolean comparison between two values, consisting of two GExpression`s and
 one of the following operators:
 "
This sentence is different from what would be generated using -breakiterator: 
"A boolean comparison between two values, consisting of two GExpression`s and
 one of the following operators:
 <p><code>
 <, >, <=, >=, ==, !"
"An expression delimited by parentheses, such as:
 "
This sentence is different from what would be generated using -breakiterator: 
"An expression delimited by parentheses, such as:
 <p><code>
 (index <= 0)
 </code><p>
 May not be used to simulate a type cast, except maybe via the printer
 when type checking is disabled (but I recommend using a GCast instead)."
"A stepwise operator, one of:
 "
This sentence is different from what would be generated using -breakiterator: 
"A stepwise operator, one of:
 <p>
 ++i, --i, i++, i--"
"A unary operation, one of:
 "
This sentence is different from what would be generated using -breakiterator: 
"A unary operation, one of:
 <p>
 !"
Generating .\org\hs\generator\class-use\GWhile.html...
Generating .\org\hs\generator\class-use\GCode.html...
Generating .\org\hs\generator\class-use\GInstanceOf.html...
Generating .\org\hs\generator\class-use\GNewArray.html...
Generating .\org\hs\generator\class-use\GTypeDeclaration.html...
Generating .\org\hs\generator\class-use\GClassInit.html...
Generating .\org\hs\generator\class-use\GMethod.html...
Generating .\org\hs\generator\class-use\GGroup.html...
Generating .\org\hs\generator\class-use\GContinue.html...
Generating .\org\hs\generator\class-use\GIf.html...
Generating .\org\hs\generator\class-use\GUnary.html...
Generating .\org\hs\generator\class-use\GLiteral.html...
Generating .\org\hs\generator\class-use\GCatch.html...
Generating .\org\hs\generator\class-use\GTry.html...
Generating .\org\hs\generator\class-use\GCast.html...
Generating .\org\hs\generator\class-use\GInterface.html...
Generating .\org\hs\generator\class-use\GDecoder.html...
Generating .\org\hs\generator\class-use\GBinary.html...
Generating .\org\hs\generator\class-use\GConstruct.html...
"GArrayAccess represents an expression in which a base expression of 
 array type is accessed with an int-valued expression in square brackets, e.g.: 
 "
This sentence is different from what would be generated using -breakiterator: 
"GArrayAccess represents an expression in which a base expression of 
 array type is accessed with an int-valued expression in square brackets, e.g.: 
 <P>
 <code>

	int[] numbers = new int[] {0,1,2,3,4,5};<br>
	System.err.println(numbers[3]);	// a GArrayAccess represents 'numbers[3]'

 </code><br>
 <P>
	Multi-dimensional arrays are represented with nested GArrayAccess expressions,
 such that the field <code>array</code> of one GArrayAccess is itself a GArrayAccess."
"GBinary represents an assortment of binary (i.e., two-sided) expressions which includes:"
This sentence is different from what would be generated using -breakiterator: 
"GBinary represents an assortment of binary (i.e., two-sided) expressions which includes:<p>
 <code>
 =<br>
 +, -, *, /<br>
 +=, -=, *=, /=<br>
 <<, >>, >>><br>
 <<=, <<=, >>>=<br>
 &, |, ^<br> 
 &=, |=, ^=<br>
</code>
<p>
	Assignment is indicated with the boolean <code>compoundAssignment</code> field.  "
"A boolean comparison between two values, consisting of two GExpression`s and
 one of the following operators:
 "
This sentence is different from what would be generated using -breakiterator: 
"A boolean comparison between two values, consisting of two GExpression`s and
 one of the following operators:
 <p><code>
 <, >, <=, >=, ==, !"
"This class represents a <code>for</code> loop such as:
 "
This sentence is different from what would be generated using -breakiterator: 
"This class represents a <code>for</code> loop such as:
 <p><code>
 for (int i = 0; i < something.size(); i++)<br>
 {<br>
     something.do(i);<br>
 }<br>
 </code><p>
 It contains the expected <code>init</code> statement ('int i = 0' in the example), 
 <code>condition</code> expression ('i < something.size()'), <code>increment</code> 
 expressions ('i++') and <code>body</code> ('{ something.do(i); }'), each of which may 
 be null (init and conditon) or empty (increment and body).  "
"An expression delimited by parentheses, such as:
 "
This sentence is different from what would be generated using -breakiterator: 
"An expression delimited by parentheses, such as:
 <p><code>
 (index <= 0)
 </code><p>
 May not be used to simulate a type cast, except maybe via the printer
 when type checking is disabled (but I recommend using a GCast instead)."
"A stepwise operator, one of:
 "
This sentence is different from what would be generated using -breakiterator: 
"A stepwise operator, one of:
 <p>
 ++i, --i, i++, i--"
"A unary operation, one of:
 "
This sentence is different from what would be generated using -breakiterator: 
"A unary operation, one of:
 <p>
 !"
"Warning!  Not implemented."
This sentence is different from what would be generated using -breakiterator: 
"Warning!  "
Generating .\org\hs\generator\class-use\GVariable.html...
Generating .\org\hs\generator\class-use\GStatement.html...
"GBinary represents an assortment of binary (i.e., two-sided) expressions which includes:"
This sentence is different from what would be generated using -breakiterator: 
"GBinary represents an assortment of binary (i.e., two-sided) expressions which includes:<p>
 <code>
 =<br>
 +, -, *, /<br>
 +=, -=, *=, /=<br>
 <<, >>, >>><br>
 <<=, <<=, >>>=<br>
 &, |, ^<br> 
 &=, |=, ^=<br>
</code>
<p>
	Assignment is indicated with the boolean <code>compoundAssignment</code> field.  "
"This class represents a <code>for</code> loop such as:
 "
This sentence is different from what would be generated using -breakiterator: 
"This class represents a <code>for</code> loop such as:
 <p><code>
 for (int i = 0; i < something.size(); i++)<br>
 {<br>
     something.do(i);<br>
 }<br>
 </code><p>
 It contains the expected <code>init</code> statement ('int i = 0' in the example), 
 <code>condition</code> expression ('i < something.size()'), <code>increment</code> 
 expressions ('i++') and <code>body</code> ('{ something.do(i); }'), each of which may 
 be null (init and conditon) or empty (increment and body).  "
"A stepwise operator, one of:
 "
This sentence is different from what would be generated using -breakiterator: 
"A stepwise operator, one of:
 <p>
 ++i, --i, i++, i--"
Generating .\org\hs\generator\class-use\GReturn.html...
Generating .\org\hs\generator\class-use\GBlock.html...
Generating .\org\hs\generator\class-use\GLoop.html...
"This class represents a <code>for</code> loop such as:
 "
This sentence is different from what would be generated using -breakiterator: 
"This class represents a <code>for</code> loop such as:
 <p><code>
 for (int i = 0; i < something.size(); i++)<br>
 {<br>
     something.do(i);<br>
 }<br>
 </code><p>
 It contains the expected <code>init</code> statement ('int i = 0' in the example), 
 <code>condition</code> expression ('i < something.size()'), <code>increment</code> 
 expressions ('i++') and <code>body</code> ('{ something.do(i); }'), each of which may 
 be null (init and conditon) or empty (increment and body).  "
Generating .\org\hs\generator\class-use\GBreak.html...
Generating .\org\hs\generator\class-use\GSwitchLabelGroup.html...
Generating .\org\hs\generator\class-use\GSwitch.html...
Generating .\org\hs\generator\class-use\GFor.html...
Generating .\org\hs\generator\class-use\GClass.html...
Generating .\org\hs\generator\class-use\GNew.html...
Generating .\org\hs\generator\class-use\GMethodCall.html...
Generating .\org\hs\generator\class-use\GType.html...
Generating .\org\hs\generator\class-use\GSourceFile.html...
Generating .\org\hs\generator\class-use\GSourceFile.Log.html...
Generating .\com\bitwise\decaf\editor\package-use.html...
Generating .\com\bitwise\decaf\editor\grammar\package-use.html...
Generating .\org\hs\generator\package-use.html...
"GArrayAccess represents an expression in which a base expression of 
 array type is accessed with an int-valued expression in square brackets, e.g.: 
 "
This sentence is different from what would be generated using -breakiterator: 
"GArrayAccess represents an expression in which a base expression of 
 array type is accessed with an int-valued expression in square brackets, e.g.: 
 <P>
 <code>

	int[] numbers = new int[] {0,1,2,3,4,5};<br>
	System.err.println(numbers[3]);	// a GArrayAccess represents 'numbers[3]'

 </code><br>
 <P>
	Multi-dimensional arrays are represented with nested GArrayAccess expressions,
 such that the field <code>array</code> of one GArrayAccess is itself a GArrayAccess."
"GBinary represents an assortment of binary (i.e., two-sided) expressions which includes:"
This sentence is different from what would be generated using -breakiterator: 
"GBinary represents an assortment of binary (i.e., two-sided) expressions which includes:<p>
 <code>
 =<br>
 +, -, *, /<br>
 +=, -=, *=, /=<br>
 <<, >>, >>><br>
 <<=, <<=, >>>=<br>
 &, |, ^<br> 
 &=, |=, ^=<br>
</code>
<p>
	Assignment is indicated with the boolean <code>compoundAssignment</code> field.  "
"A boolean comparison between two values, consisting of two GExpression`s and
 one of the following operators:
 "
This sentence is different from what would be generated using -breakiterator: 
"A boolean comparison between two values, consisting of two GExpression`s and
 one of the following operators:
 <p><code>
 <, >, <=, >=, ==, !"
"A unary operation, one of:
 "
This sentence is different from what would be generated using -breakiterator: 
"A unary operation, one of:
 <p>
 !"
Generating .\org\hs\jfc\package-use.html...
Building index for all the packages and classes...
Generating .\overview-tree.html...
Generating .\index-all.html...
"Warning: not implemented!  Prints a warning to System.err."
This sentence is different from what would be generated using -breakiterator: 
"Warning: not implemented!  "
"Warning: not implemented!  Prints a warning to System.err."
This sentence is different from what would be generated using -breakiterator: 
"Warning: not implemented!  "
"Warning: not implemented!  Prints a warning to System.err."
This sentence is different from what would be generated using -breakiterator: 
"Warning: not implemented!  "
"Warning: not implemented!  Prints a warning to System.err."
This sentence is different from what would be generated using -breakiterator: 
"Warning: not implemented!  "
"Warning: not implemented!  Prints a warning to System.err."
This sentence is different from what would be generated using -breakiterator: 
"Warning: not implemented!  "
"Warning!  Not implemented."
This sentence is different from what would be generated using -breakiterator: 
"Warning!  "
"GArrayAccess represents an expression in which a base expression of 
 array type is accessed with an int-valued expression in square brackets, e.g.: 
 "
This sentence is different from what would be generated using -breakiterator: 
"GArrayAccess represents an expression in which a base expression of 
 array type is accessed with an int-valued expression in square brackets, e.g.: 
 <P>
 <code>

	int[] numbers = new int[] {0,1,2,3,4,5};<br>
	System.err.println(numbers[3]);	// a GArrayAccess represents 'numbers[3]'

 </code><br>
 <P>
	Multi-dimensional arrays are represented with nested GArrayAccess expressions,
 such that the field <code>array</code> of one GArrayAccess is itself a GArrayAccess."
"GBinary represents an assortment of binary (i.e., two-sided) expressions which includes:"
This sentence is different from what would be generated using -breakiterator: 
"GBinary represents an assortment of binary (i.e., two-sided) expressions which includes:<p>
 <code>
 =<br>
 +, -, *, /<br>
 +=, -=, *=, /=<br>
 <<, >>, >>><br>
 <<=, <<=, >>>=<br>
 &, |, ^<br> 
 &=, |=, ^=<br>
</code>
<p>
	Assignment is indicated with the boolean <code>compoundAssignment</code> field.  "
"A boolean comparison between two values, consisting of two GExpression`s and
 one of the following operators:
 "
This sentence is different from what would be generated using -breakiterator: 
"A boolean comparison between two values, consisting of two GExpression`s and
 one of the following operators:
 <p><code>
 <, >, <=, >=, ==, !"
"This class represents a <code>for</code> loop such as:
 "
This sentence is different from what would be generated using -breakiterator: 
"This class represents a <code>for</code> loop such as:
 <p><code>
 for (int i = 0; i < something.size(); i++)<br>
 {<br>
     something.do(i);<br>
 }<br>
 </code><p>
 It contains the expected <code>init</code> statement ('int i = 0' in the example), 
 <code>condition</code> expression ('i < something.size()'), <code>increment</code> 
 expressions ('i++') and <code>body</code> ('{ something.do(i); }'), each of which may 
 be null (init and conditon) or empty (increment and body).  "
"An expression delimited by parentheses, such as:
 "
This sentence is different from what would be generated using -breakiterator: 
"An expression delimited by parentheses, such as:
 <p><code>
 (index <= 0)
 </code><p>
 May not be used to simulate a type cast, except maybe via the printer
 when type checking is disabled (but I recommend using a GCast instead)."
"Returns the current selection in the following manner:
 "
This sentence is different from what would be generated using -breakiterator: 
"Returns the current selection in the following manner:
 <p>
 &middot; if multiple items are selected, give a HotCollection
 containing the selected items and the type GStatement<br>
 &middot; if a Sentence containing a DVariable is selected, 
 give the variable<br>
 &middot; if a Sentence containing anything else is selected, 
 give the sentence"
"A stepwise operator, one of:
 "
This sentence is different from what would be generated using -breakiterator: 
"A stepwise operator, one of:
 <p>
 ++i, --i, i++, i--"
"A unary operation, one of:
 "
This sentence is different from what would be generated using -breakiterator: 
"A unary operation, one of:
 <p>
 !"
"Considser the <code>hot</code> object as follows:
 "
This sentence is different from what would be generated using -breakiterator: 
"Considser the <code>hot</code> object as follows:
 <p>
 &middot; if it's a HotCollection, reject it<br>
 &middot; if a required type has been applied to this PhraseBox,
 accept <code>hot</code> only if it can be assigned to that type
 (which implies that <code>hot</code> must be {@link Typed})."
"E.g., given <code>boolean b</code>:<br>
 !b"
This sentence is different from what would be generated using -breakiterator: 
"E.g., given <code>boolean b</code>:<br>
 !"
"The operator !="
This sentence is different from what would be generated using -breakiterator: 
"The operator !"
"The parameters, a collection of GVariable with the anticipated conditions:
 "
This sentence is different from what would be generated using -breakiterator: 
"The parameters, a collection of GVariable with the anticipated conditions:
 <p>
 1) GVariable.isLocal is true<br>
 2) GVariable.initializer is null<br>
 3) GVariable.prefix is null<br>
 <p>
 GVariable.modifiers will be ignored."
"It's the clugerific unary plus operator!<br>
 E.g., given <code>int x</code>:<br>
 +x"
This sentence is different from what would be generated using -breakiterator: 
"It's the clugerific unary plus operator!"
"Register this ParagraphBox with <code>arbiter</code> as follows:
 "
This sentence is different from what would be generated using -breakiterator: 
"Register this ParagraphBox with <code>arbiter</code> as follows:
 <p>
 <u>offer</u><br>
 1) GVariable by any operation, defaulting to {@link HotComponent#LINK}<br>
 2) GExpression by {@link HotComponent#MOVE} | {@link HotComponent#COPY}, defaulting to {@link HotComponent#COPY}<br>
 3) GStatement by {@link HotComponent#MOVE} | {@link HotComponent#COPY}, defaulting to {@link HotComponent#MOVE}<br>
 <p>
 <u>receive</u><br>
 1) GVariable by {@link HotComponent#MOVE} | {@link HotComponent#COPY}<br>
 2) GStatement by {@link HotComponent#MOVE} | {@link HotComponent#COPY}<br>"
"Register this PhraseBox with <code>arbiter</code> as follows:
 "
This sentence is different from what would be generated using -breakiterator: 
"Register this PhraseBox with <code>arbiter</code> as follows:
 <p>
 <u>receive</u><br>
 1) GVariable by {@link HotComponent#LINK}<br>
 2) GExpression by {@link HotComponent#MOVE} | {@link HotComponent#COPY}"
"set <code>this.content</code> with the data provided as <code>o</code>
 by the following rules:
 "
This sentence is different from what would be generated using -breakiterator: 
"set <code>this.content</code> with the data provided as <code>o</code>
 by the following rules:
 <p>
 1) if o is a Phrase, take its content<br>
 2) if o implements Grammar.Content, take o<br>
 3) if o is null, set content to null<br>
 4) no other forms of o are acceptable: throw an IllegalArgumentException 
 asking what the object is (by classname, as class is the criterium)"
"set <code>this.content</code> with the data provided as <code>o</code>
 by the following rules:
 "
This sentence is different from what would be generated using -breakiterator: 
"set <code>this.content</code> with the data provided as <code>o</code>
 by the following rules:
 <p>
 1) if o is a Sentence, take its content<br>
 2) if o implements Grammar.Content, take o<br>
 3) if o is null, set content to null<br>
 4) no other forms of o are acceptable: throw an IllegalArgumentException 
 asking what the object is (by classname, as class is the criterium)"
Generating .\deprecated-list.html...
Building index for all classes...
Generating .\allclasses-frame.html...
Generating .\allclasses-noframe.html...
Generating .\index.html...
Generating .\packages.html...
Generating .\overview-summary.html...
Generating .\overview-frame.html...
Generating .\com\bitwise\decaf\editor\package-frame.html...
Generating .\com\bitwise\decaf\editor\package-summary.html...
Generating .\com\bitwise\decaf\editor\package-tree.html...
Generating .\com\bitwise\decaf\editor\grammar\package-frame.html...
Generating .\com\bitwise\decaf\editor\grammar\package-summary.html...
Generating .\com\bitwise\decaf\editor\grammar\package-tree.html...
Generating .\org\hs\generator\package-frame.html...
Generating .\org\hs\generator\package-summary.html...
"GArrayAccess represents an expression in which a base expression of 
 array type is accessed with an int-valued expression in square brackets, e.g.: 
 "
This sentence is different from what would be generated using -breakiterator: 
"GArrayAccess represents an expression in which a base expression of 
 array type is accessed with an int-valued expression in square brackets, e.g.: 
 <P>
 <code>

	int[] numbers = new int[] {0,1,2,3,4,5};<br>
	System.err.println(numbers[3]);	// a GArrayAccess represents 'numbers[3]'

 </code><br>
 <P>
	Multi-dimensional arrays are represented with nested GArrayAccess expressions,
 such that the field <code>array</code> of one GArrayAccess is itself a GArrayAccess."
"GBinary represents an assortment of binary (i.e., two-sided) expressions which includes:"
This sentence is different from what would be generated using -breakiterator: 
"GBinary represents an assortment of binary (i.e., two-sided) expressions which includes:<p>
 <code>
 =<br>
 +, -, *, /<br>
 +=, -=, *=, /=<br>
 <<, >>, >>><br>
 <<=, <<=, >>>=<br>
 &, |, ^<br> 
 &=, |=, ^=<br>
</code>
<p>
	Assignment is indicated with the boolean <code>compoundAssignment</code> field.  "
"A boolean comparison between two values, consisting of two GExpression`s and
 one of the following operators:
 "
This sentence is different from what would be generated using -breakiterator: 
"A boolean comparison between two values, consisting of two GExpression`s and
 one of the following operators:
 <p><code>
 <, >, <=, >=, ==, !"
"This class represents a <code>for</code> loop such as:
 "
This sentence is different from what would be generated using -breakiterator: 
"This class represents a <code>for</code> loop such as:
 <p><code>
 for (int i = 0; i < something.size(); i++)<br>
 {<br>
     something.do(i);<br>
 }<br>
 </code><p>
 It contains the expected <code>init</code> statement ('int i = 0' in the example), 
 <code>condition</code> expression ('i < something.size()'), <code>increment</code> 
 expressions ('i++') and <code>body</code> ('{ something.do(i); }'), each of which may 
 be null (init and conditon) or empty (increment and body).  "
"An expression delimited by parentheses, such as:
 "
This sentence is different from what would be generated using -breakiterator: 
"An expression delimited by parentheses, such as:
 <p><code>
 (index <= 0)
 </code><p>
 May not be used to simulate a type cast, except maybe via the printer
 when type checking is disabled (but I recommend using a GCast instead)."
"A stepwise operator, one of:
 "
This sentence is different from what would be generated using -breakiterator: 
"A stepwise operator, one of:
 <p>
 ++i, --i, i++, i--"
"A unary operation, one of:
 "
This sentence is different from what would be generated using -breakiterator: 
"A unary operation, one of:
 <p>
 !"
Generating .\org\hs\generator\package-tree.html...
Generating .\org\hs\jfc\package-frame.html...
Generating .\org\hs\jfc\package-summary.html...
Generating .\org\hs\jfc\package-tree.html...
Generating .\com\bitwise\decaf\editor\grammar\CodeNode.html...
Generating .\com\bitwise\decaf\editor\grammar\CodeNode.Event.html...
Generating .\com\bitwise\decaf\editor\grammar\CodeNode.Listener.html...
Generating .\com\bitwise\decaf\editor\Decaf.html...
Generating .\com\bitwise\decaf\editor\DecafTextComponent.html...
Generating .\com\bitwise\decaf\editor\DecafTypeComponent.html...
Generating .\com\bitwise\decaf\editor\DTextField.html...
Generating .\com\bitwise\decaf\editor\DTypeBox.html...
Generating .\com\bitwise\decaf\editor\grammar\EnforcementOfficer.html...
Generating .\com\bitwise\decaf\editor\grammar\EnforcementOfficer.ViolationWindow.html...
Generating .\com\bitwise\decaf\editor\Form.html...
Generating .\com\bitwise\decaf\editor\grammar\Grammar.html...
Generating .\com\bitwise\decaf\editor\grammar\Grammar.ClassReference.html...
Generating .\com\bitwise\decaf\editor\grammar\Grammar.Content.html...
Generating .\com\bitwise\decaf\editor\grammar\GrammarMask.html...
Generating .\com\bitwise\decaf\editor\Mask.html...
Generating .\com\bitwise\decaf\editor\MaskComponent.html...
Generating .\com\bitwise\decaf\editor\grammar\Officer.html...
Generating .\com\bitwise\decaf\editor\grammar\Officer.Deputy.html...
Generating .\com\bitwise\decaf\editor\grammar\Officer.Foreign.html...
Generating .\com\bitwise\decaf\editor\grammar\Paragraph.html...
Generating .\com\bitwise\decaf\editor\grammar\ParagraphBox.html...
"Returns the current selection in the following manner:
 "
This sentence is different from what would be generated using -breakiterator: 
"Returns the current selection in the following manner:
 <p>
 &middot; if multiple items are selected, give a HotCollection
 containing the selected items and the type GStatement<br>
 &middot; if a Sentence containing a DVariable is selected, 
 give the variable<br>
 &middot; if a Sentence containing anything else is selected, 
 give the sentence"
"Register this ParagraphBox with <code>arbiter</code> as follows:
 "
This sentence is different from what would be generated using -breakiterator: 
"Register this ParagraphBox with <code>arbiter</code> as follows:
 <p>
 <u>offer</u><br>
 1) GVariable by any operation, defaulting to {@link HotComponent#LINK}<br>
 2) GExpression by {@link HotComponent#MOVE} | {@link HotComponent#COPY}, defaulting to {@link HotComponent#COPY}<br>
 3) GStatement by {@link HotComponent#MOVE} | {@link HotComponent#COPY}, defaulting to {@link HotComponent#MOVE}<br>
 <p>
 <u>receive</u><br>
 1) GVariable by {@link HotComponent#MOVE} | {@link HotComponent#COPY}<br>
 2) GStatement by {@link HotComponent#MOVE} | {@link HotComponent#COPY}<br>"
Generating .\com\bitwise\decaf\editor\grammar\Phrase.html...
"set <code>this.content</code> with the data provided as <code>o</code>
 by the following rules:
 "
This sentence is different from what would be generated using -breakiterator: 
"set <code>this.content</code> with the data provided as <code>o</code>
 by the following rules:
 <p>
 1) if o is a Phrase, take its content<br>
 2) if o implements Grammar.Content, take o<br>
 3) if o is null, set content to null<br>
 4) no other forms of o are acceptable: throw an IllegalArgumentException 
 asking what the object is (by classname, as class is the criterium)"
Generating .\com\bitwise\decaf\editor\grammar\Phrase.TypeChameleon.html...
Generating .\com\bitwise\decaf\editor\grammar\PhraseBox.html...
"Considser the <code>hot</code> object as follows:
 "
This sentence is different from what would be generated using -breakiterator: 
"Considser the <code>hot</code> object as follows:
 <p>
 &middot; if it's a HotCollection, reject it<br>
 &middot; if a required type has been applied to this PhraseBox,
 accept <code>hot</code> only if it can be assigned to that type
 (which implies that <code>hot</code> must be {@link Typed})."
"Register this PhraseBox with <code>arbiter</code> as follows:
 "
This sentence is different from what would be generated using -breakiterator: 
"Register this PhraseBox with <code>arbiter</code> as follows:
 <p>
 <u>receive</u><br>
 1) GVariable by {@link HotComponent#LINK}<br>
 2) GExpression by {@link HotComponent#MOVE} | {@link HotComponent#COPY}"
Generating .\com\bitwise\decaf\editor\PrimitiveType.html...
Generating .\com\bitwise\decaf\editor\grammar\Sentence.html...
"set <code>this.content</code> with the data provided as <code>o</code>
 by the following rules:
 "
This sentence is different from what would be generated using -breakiterator: 
"set <code>this.content</code> with the data provided as <code>o</code>
 by the following rules:
 <p>
 1) if o is a Sentence, take its content<br>
 2) if o implements Grammar.Content, take o<br>
 3) if o is null, set content to null<br>
 4) no other forms of o are acceptable: throw an IllegalArgumentException 
 asking what the object is (by classname, as class is the criterium)"
Generating .\com\bitwise\decaf\editor\Type.html...
Generating .\com\bitwise\decaf\editor\Type.Cache.html...
Generating .\com\bitwise\decaf\editor\Type.CacheKey.html...
Generating .\com\bitwise\decaf\editor\Type.Field.html...
Generating .\com\bitwise\decaf\editor\Type.FieldsByName.html...
Generating .\com\bitwise\decaf\editor\Type.MethodsByName.html...
Generating .\com\bitwise\decaf\editor\Type.NoType.html...
Generating .\com\bitwise\decaf\editor\Type.VoidType.html...
Generating .\com\bitwise\decaf\editor\Typed.html...
Generating .\com\bitwise\decaf\editor\grammar\TypeOfficer.html...
Generating .\com\bitwise\decaf\editor\Utils.html...
Generating .\com\bitwise\decaf\editor\Utils.CollectionMap.html...
Generating .\com\bitwise\decaf\editor\Utils.EmptyVector.html...
Generating .\com\bitwise\decaf\editor\Utils.List.html...
Generating .\com\bitwise\decaf\editor\Utils.List.Event.html...
Generating .\com\bitwise\decaf\editor\Utils.List.Listener.html...
Generating .\com\bitwise\decaf\editor\Utils.ListModel.html...
Generating .\com\bitwise\decaf\editor\Utils.Location.html...
Generating .\com\bitwise\decaf\editor\Utils.RealEstateManager.html...
Generating .\com\bitwise\decaf\editor\Utils.Renderable.html...
Generating .\com\bitwise\decaf\editor\Utils.RenderLabel.html...
Generating .\com\bitwise\decaf\editor\Utils.RenderPanel.html...
Generating .\com\bitwise\decaf\editor\Utils.SerialException.html...
Generating .\com\bitwise\decaf\editor\Utils.SerialVector.html...
Generating .\org\hs\jfc\HotComponent.html...
Generating .\org\hs\jfc\CursorCenter.html...
Generating .\org\hs\jfc\CursorCenter.Descriptor.html...
Generating .\org\hs\jfc\FormLayout.html...
Generating .\org\hs\jfc\FormPanel.html...
"Warning: not implemented!  Prints a warning to System.err."
This sentence is different from what would be generated using -breakiterator: 
"Warning: not implemented!  "
"Warning: not implemented!  Prints a warning to System.err."
This sentence is different from what would be generated using -breakiterator: 
"Warning: not implemented!  "
"Warning: not implemented!  Prints a warning to System.err."
This sentence is different from what would be generated using -breakiterator: 
"Warning: not implemented!  "
"Warning: not implemented!  Prints a warning to System.err."
This sentence is different from what would be generated using -breakiterator: 
"Warning: not implemented!  "
"Warning: not implemented!  Prints a warning to System.err."
This sentence is different from what would be generated using -breakiterator: 
"Warning: not implemented!  "
Generating .\org\hs\jfc\HotComponent.Arbiter.html...
Generating .\org\hs\jfc\HotComponent.Constraints.html...
Generating .\org\hs\jfc\HotComponent.HotCollection.html...
Generating .\org\hs\jfc\HotStation.html...
Generating .\org\hs\jfc\hVector.html...
Generating .\org\hs\generator\GExpression.html...
Generating .\org\hs\generator\GSourceFile.Log.html...
Generating .\org\hs\generator\GStatement.html...
Generating .\org\hs\generator\GArrayAccess.html...
Generating .\org\hs\generator\GBinary.html...
Generating .\org\hs\generator\GBlock.html...
Generating .\org\hs\generator\GBreak.html...
Generating .\org\hs\generator\GCast.html...
Generating .\org\hs\generator\GCatch.html...
Generating .\org\hs\generator\GClass.html...
Generating .\org\hs\generator\GClassInit.html...
Generating .\org\hs\generator\GCode.html...
Generating .\org\hs\generator\GComment.html...
Generating .\org\hs\generator\GComparison.html...
"The operator !="
This sentence is different from what would be generated using -breakiterator: 
"The operator !"
Generating .\org\hs\generator\GConstruct.html...
"Warning!  Not implemented."
This sentence is different from what would be generated using -breakiterator: 
"Warning!  "
Generating .\org\hs\generator\GContinue.html...
Generating .\org\hs\generator\GDecoder.html...
Generating .\org\hs\generator\GFor.html...
Generating .\org\hs\generator\GGroup.html...
Generating .\org\hs\generator\GIf.html...
Generating .\org\hs\generator\GInstanceOf.html...
Generating .\org\hs\generator\GInterface.html...
Generating .\org\hs\generator\GLiteral.html...
Generating .\org\hs\generator\GLoop.html...
Generating .\org\hs\generator\GMethod.html...
"The parameters, a collection of GVariable with the anticipated conditions:
 "
This sentence is different from what would be generated using -breakiterator: 
"The parameters, a collection of GVariable with the anticipated conditions:
 <p>
 1) GVariable.isLocal is true<br>
 2) GVariable.initializer is null<br>
 3) GVariable.prefix is null<br>
 <p>
 GVariable.modifiers will be ignored."
Generating .\org\hs\generator\GMethodCall.html...
Generating .\org\hs\generator\GNew.html...
Generating .\org\hs\generator\GNewArray.html...
Generating .\org\hs\generator\GReference.html...
Generating .\org\hs\generator\GReturn.html...
Generating .\org\hs\generator\GSourceFile.html...
Generating .\org\hs\generator\GStepwise.html...
Generating .\org\hs\generator\GSwitch.html...
Generating .\org\hs\generator\GSwitchLabelGroup.html...
Generating .\org\hs\generator\GSynchronized.html...
Generating .\org\hs\generator\GThrow.html...
Generating .\org\hs\generator\GTry.html...
Generating .\org\hs\generator\GType.html...
Generating .\org\hs\generator\GTypeDeclaration.html...
Generating .\org\hs\generator\GUnary.html...
"E.g., given <code>boolean b</code>:<br>
 !b"
This sentence is different from what would be generated using -breakiterator: 
"E.g., given <code>boolean b</code>:<br>
 !"
"It's the clugerific unary plus operator!<br>
 E.g., given <code>int x</code>:<br>
 +x"
This sentence is different from what would be generated using -breakiterator: 
"It's the clugerific unary plus operator!"
Generating .\org\hs\generator\GVariable.html...
Generating .\org\hs\generator\GVariableList.html...
Generating .\org\hs\generator\GWhile.html...
Generating .\serialized-form.html...
Generating .\package-list...
Generating .\help-doc.html...
Generating .\stylesheet.css...
151 warnings
